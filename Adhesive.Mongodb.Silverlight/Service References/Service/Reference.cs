//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.239
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace Adhesive.Mongodb.Silverlight.Service {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationLog", Namespace="http://schemas.datacontract.org/2004/07/Adhesive.Mongodb.Silverlight.Web")]
    public partial class OperationLog : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AccountNameField;
        
        private string AccountRealNameField;
        
        private string ActionField;
        
        private string ActionMemoField;
        
        private string CategoryNameField;
        
        private string DatabaseNameField;
        
        private string IDField;
        
        private System.DateTime ServerTimeField;
        
        private string TableNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountName {
            get {
                return this.AccountNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountNameField, value) != true)) {
                    this.AccountNameField = value;
                    this.RaisePropertyChanged("AccountName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountRealName {
            get {
                return this.AccountRealNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountRealNameField, value) != true)) {
                    this.AccountRealNameField = value;
                    this.RaisePropertyChanged("AccountRealName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Action {
            get {
                return this.ActionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionField, value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActionMemo {
            get {
                return this.ActionMemoField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionMemoField, value) != true)) {
                    this.ActionMemoField = value;
                    this.RaisePropertyChanged("ActionMemo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DatabaseName {
            get {
                return this.DatabaseNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DatabaseNameField, value) != true)) {
                    this.DatabaseNameField = value;
                    this.RaisePropertyChanged("DatabaseName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ServerTime {
            get {
                return this.ServerTimeField;
            }
            set {
                if ((this.ServerTimeField.Equals(value) != true)) {
                    this.ServerTimeField = value;
                    this.RaisePropertyChanged("ServerTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TableName {
            get {
                return this.TableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TableNameField, value) != true)) {
                    this.TableNameField = value;
                    this.RaisePropertyChanged("TableName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="Adhesive.Mongodb")]
    public partial class Category : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.SubCategory> SubCategoryListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.SubCategory> SubCategoryList {
            get {
                return this.SubCategoryListField;
            }
            set {
                if ((object.ReferenceEquals(this.SubCategoryListField, value) != true)) {
                    this.SubCategoryListField = value;
                    this.RaisePropertyChanged("SubCategoryList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubCategory", Namespace="Adhesive.Mongodb")]
    public partial class SubCategory : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DatabasePrefixField;
        
        private string DisplayNameField;
        
        private string NameField;
        
        private System.Collections.Generic.List<string> TableNamesField;
        
        private string TypeFullNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DatabasePrefix {
            get {
                return this.DatabasePrefixField;
            }
            set {
                if ((object.ReferenceEquals(this.DatabasePrefixField, value) != true)) {
                    this.DatabasePrefixField = value;
                    this.RaisePropertyChanged("DatabasePrefix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> TableNames {
            get {
                return this.TableNamesField;
            }
            set {
                if ((object.ReferenceEquals(this.TableNamesField, value) != true)) {
                    this.TableNamesField = value;
                    this.RaisePropertyChanged("TableNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeFullName {
            get {
                return this.TypeFullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeFullNameField, value) != true)) {
                    this.TypeFullNameField = value;
                    this.RaisePropertyChanged("TypeFullName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MongodbServerUrl", Namespace="Adhesive.Mongodb")]
    public partial class MongodbServerUrl : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string MasterField;
        
        private string NameField;
        
        private string SlaveField;
        
        private System.TimeSpan SyncDelayField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Master {
            get {
                return this.MasterField;
            }
            set {
                if ((object.ReferenceEquals(this.MasterField, value) != true)) {
                    this.MasterField = value;
                    this.RaisePropertyChanged("Master");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Slave {
            get {
                return this.SlaveField;
            }
            set {
                if ((object.ReferenceEquals(this.SlaveField, value) != true)) {
                    this.SlaveField = value;
                    this.RaisePropertyChanged("Slave");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan SyncDelay {
            get {
                return this.SyncDelayField;
            }
            set {
                if ((this.SyncDelayField.Equals(value) != true)) {
                    this.SyncDelayField = value;
                    this.RaisePropertyChanged("SyncDelay");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerInfo", Namespace="Adhesive.Mongodb")]
    public partial class ServerInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.DatabaseInfo> DatabasesField;
        
        private System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.MongodbDatabaseDescription> DescriptionsField;
        
        private Adhesive.Mongodb.Silverlight.Service.MongodbServerUrl UrlField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.DatabaseInfo> Databases {
            get {
                return this.DatabasesField;
            }
            set {
                if ((object.ReferenceEquals(this.DatabasesField, value) != true)) {
                    this.DatabasesField = value;
                    this.RaisePropertyChanged("Databases");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.MongodbDatabaseDescription> Descriptions {
            get {
                return this.DescriptionsField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionsField, value) != true)) {
                    this.DescriptionsField = value;
                    this.RaisePropertyChanged("Descriptions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Adhesive.Mongodb.Silverlight.Service.MongodbServerUrl Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Entity", Namespace="http://schemas.datacontract.org/2004/07/Adhesive.Domain")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.AlarmItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.AlarmProcessItem))]
    public partial class Entity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlarmItem", Namespace="http://schemas.datacontract.org/2004/07/Adhesive.Alarm.Common")]
    public partial class AlarmItem : Adhesive.Mongodb.Silverlight.Service.Entity {
        
        private string AlarmConfigNameField;
        
        private string AlarmDatabaseNameField;
        
        private System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.AlarmProcessItem> AlarmProcessItemsField;
        
        private Adhesive.Mongodb.Silverlight.Service.AlarmStatus AlarmStatusField;
        
        private string AlarmTableNameField;
        
        private int AlarmTimesField;
        
        private System.DateTime CloseTimeField;
        
        private System.DateTime HandleTimeField;
        
        private System.DateTime OpenTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlarmConfigName {
            get {
                return this.AlarmConfigNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AlarmConfigNameField, value) != true)) {
                    this.AlarmConfigNameField = value;
                    this.RaisePropertyChanged("AlarmConfigName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlarmDatabaseName {
            get {
                return this.AlarmDatabaseNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AlarmDatabaseNameField, value) != true)) {
                    this.AlarmDatabaseNameField = value;
                    this.RaisePropertyChanged("AlarmDatabaseName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.AlarmProcessItem> AlarmProcessItems {
            get {
                return this.AlarmProcessItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.AlarmProcessItemsField, value) != true)) {
                    this.AlarmProcessItemsField = value;
                    this.RaisePropertyChanged("AlarmProcessItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Adhesive.Mongodb.Silverlight.Service.AlarmStatus AlarmStatus {
            get {
                return this.AlarmStatusField;
            }
            set {
                if ((this.AlarmStatusField.Equals(value) != true)) {
                    this.AlarmStatusField = value;
                    this.RaisePropertyChanged("AlarmStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlarmTableName {
            get {
                return this.AlarmTableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AlarmTableNameField, value) != true)) {
                    this.AlarmTableNameField = value;
                    this.RaisePropertyChanged("AlarmTableName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AlarmTimes {
            get {
                return this.AlarmTimesField;
            }
            set {
                if ((this.AlarmTimesField.Equals(value) != true)) {
                    this.AlarmTimesField = value;
                    this.RaisePropertyChanged("AlarmTimes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CloseTime {
            get {
                return this.CloseTimeField;
            }
            set {
                if ((this.CloseTimeField.Equals(value) != true)) {
                    this.CloseTimeField = value;
                    this.RaisePropertyChanged("CloseTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime HandleTime {
            get {
                return this.HandleTimeField;
            }
            set {
                if ((this.HandleTimeField.Equals(value) != true)) {
                    this.HandleTimeField = value;
                    this.RaisePropertyChanged("HandleTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime OpenTime {
            get {
                return this.OpenTimeField;
            }
            set {
                if ((this.OpenTimeField.Equals(value) != true)) {
                    this.OpenTimeField = value;
                    this.RaisePropertyChanged("OpenTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlarmProcessItem", Namespace="http://schemas.datacontract.org/2004/07/Adhesive.Alarm.Common")]
    public partial class AlarmProcessItem : Adhesive.Mongodb.Silverlight.Service.Entity {
        
        private Adhesive.Mongodb.Silverlight.Service.AlarmItem AlarmItemField;
        
        private string AlarmItemIdField;
        
        private Adhesive.Mongodb.Silverlight.Service.AlarmStatus AlarmStatusField;
        
        private System.DateTime EventTimeField;
        
        private string MailCommentField;
        
        private string MobileCommentField;
        
        private string ProcessUserNameField;
        
        private string ProcessUserRealNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Adhesive.Mongodb.Silverlight.Service.AlarmItem AlarmItem {
            get {
                return this.AlarmItemField;
            }
            set {
                if ((object.ReferenceEquals(this.AlarmItemField, value) != true)) {
                    this.AlarmItemField = value;
                    this.RaisePropertyChanged("AlarmItem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlarmItemId {
            get {
                return this.AlarmItemIdField;
            }
            set {
                if ((object.ReferenceEquals(this.AlarmItemIdField, value) != true)) {
                    this.AlarmItemIdField = value;
                    this.RaisePropertyChanged("AlarmItemId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Adhesive.Mongodb.Silverlight.Service.AlarmStatus AlarmStatus {
            get {
                return this.AlarmStatusField;
            }
            set {
                if ((this.AlarmStatusField.Equals(value) != true)) {
                    this.AlarmStatusField = value;
                    this.RaisePropertyChanged("AlarmStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EventTime {
            get {
                return this.EventTimeField;
            }
            set {
                if ((this.EventTimeField.Equals(value) != true)) {
                    this.EventTimeField = value;
                    this.RaisePropertyChanged("EventTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MailComment {
            get {
                return this.MailCommentField;
            }
            set {
                if ((object.ReferenceEquals(this.MailCommentField, value) != true)) {
                    this.MailCommentField = value;
                    this.RaisePropertyChanged("MailComment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MobileComment {
            get {
                return this.MobileCommentField;
            }
            set {
                if ((object.ReferenceEquals(this.MobileCommentField, value) != true)) {
                    this.MobileCommentField = value;
                    this.RaisePropertyChanged("MobileComment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessUserName {
            get {
                return this.ProcessUserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessUserNameField, value) != true)) {
                    this.ProcessUserNameField = value;
                    this.RaisePropertyChanged("ProcessUserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessUserRealName {
            get {
                return this.ProcessUserRealNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessUserRealNameField, value) != true)) {
                    this.ProcessUserRealNameField = value;
                    this.RaisePropertyChanged("ProcessUserRealName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DatabaseInfo", Namespace="Adhesive.Mongodb")]
    public partial class DatabaseInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.CollectionInfo> CollectionsField;
        
        private System.DateTime DatabaseDateField;
        
        private string DatabaseNameField;
        
        private string DatabasePrefixField;
        
        private Adhesive.Mongodb.Silverlight.Service.DatabaseStatus DatabaseStatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.CollectionInfo> Collections {
            get {
                return this.CollectionsField;
            }
            set {
                if ((object.ReferenceEquals(this.CollectionsField, value) != true)) {
                    this.CollectionsField = value;
                    this.RaisePropertyChanged("Collections");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DatabaseDate {
            get {
                return this.DatabaseDateField;
            }
            set {
                if ((this.DatabaseDateField.Equals(value) != true)) {
                    this.DatabaseDateField = value;
                    this.RaisePropertyChanged("DatabaseDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DatabaseName {
            get {
                return this.DatabaseNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DatabaseNameField, value) != true)) {
                    this.DatabaseNameField = value;
                    this.RaisePropertyChanged("DatabaseName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DatabasePrefix {
            get {
                return this.DatabasePrefixField;
            }
            set {
                if ((object.ReferenceEquals(this.DatabasePrefixField, value) != true)) {
                    this.DatabasePrefixField = value;
                    this.RaisePropertyChanged("DatabasePrefix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Adhesive.Mongodb.Silverlight.Service.DatabaseStatus DatabaseStatus {
            get {
                return this.DatabaseStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.DatabaseStatusField, value) != true)) {
                    this.DatabaseStatusField = value;
                    this.RaisePropertyChanged("DatabaseStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MongodbDatabaseDescription", Namespace="Adhesive.Mongodb")]
    public partial class MongodbDatabaseDescription : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CategoryNameField;
        
        private string DatabasePrefixField;
        
        private string DisplayNameField;
        
        private int ExpireDaysField;
        
        private System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.MongodbColumnDescription> MongodbColumnDescriptionListField;
        
        private System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.MongodbEnumColumnDescription> MongodbEnumColumnDescriptionListField;
        
        private string NameField;
        
        private bool SentToServerField;
        
        private string TypeFullNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DatabasePrefix {
            get {
                return this.DatabasePrefixField;
            }
            set {
                if ((object.ReferenceEquals(this.DatabasePrefixField, value) != true)) {
                    this.DatabasePrefixField = value;
                    this.RaisePropertyChanged("DatabasePrefix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExpireDays {
            get {
                return this.ExpireDaysField;
            }
            set {
                if ((this.ExpireDaysField.Equals(value) != true)) {
                    this.ExpireDaysField = value;
                    this.RaisePropertyChanged("ExpireDays");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.MongodbColumnDescription> MongodbColumnDescriptionList {
            get {
                return this.MongodbColumnDescriptionListField;
            }
            set {
                if ((object.ReferenceEquals(this.MongodbColumnDescriptionListField, value) != true)) {
                    this.MongodbColumnDescriptionListField = value;
                    this.RaisePropertyChanged("MongodbColumnDescriptionList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.MongodbEnumColumnDescription> MongodbEnumColumnDescriptionList {
            get {
                return this.MongodbEnumColumnDescriptionListField;
            }
            set {
                if ((object.ReferenceEquals(this.MongodbEnumColumnDescriptionListField, value) != true)) {
                    this.MongodbEnumColumnDescriptionListField = value;
                    this.RaisePropertyChanged("MongodbEnumColumnDescriptionList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SentToServer {
            get {
                return this.SentToServerField;
            }
            set {
                if ((this.SentToServerField.Equals(value) != true)) {
                    this.SentToServerField = value;
                    this.RaisePropertyChanged("SentToServer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeFullName {
            get {
                return this.TypeFullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeFullNameField, value) != true)) {
                    this.TypeFullNameField = value;
                    this.RaisePropertyChanged("TypeFullName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DatabaseStatus", Namespace="Adhesive.Mongodb")]
    public partial class DatabaseStatus : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double AverageObjectSizeField;
        
        private int CollectionCountField;
        
        private long DataSizeField;
        
        private int ExtentCountField;
        
        private long FileSizeField;
        
        private int IndexCountField;
        
        private long IndexSizeField;
        
        private long ObjectCountField;
        
        private long StorageSizeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AverageObjectSize {
            get {
                return this.AverageObjectSizeField;
            }
            set {
                if ((this.AverageObjectSizeField.Equals(value) != true)) {
                    this.AverageObjectSizeField = value;
                    this.RaisePropertyChanged("AverageObjectSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CollectionCount {
            get {
                return this.CollectionCountField;
            }
            set {
                if ((this.CollectionCountField.Equals(value) != true)) {
                    this.CollectionCountField = value;
                    this.RaisePropertyChanged("CollectionCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DataSize {
            get {
                return this.DataSizeField;
            }
            set {
                if ((this.DataSizeField.Equals(value) != true)) {
                    this.DataSizeField = value;
                    this.RaisePropertyChanged("DataSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExtentCount {
            get {
                return this.ExtentCountField;
            }
            set {
                if ((this.ExtentCountField.Equals(value) != true)) {
                    this.ExtentCountField = value;
                    this.RaisePropertyChanged("ExtentCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long FileSize {
            get {
                return this.FileSizeField;
            }
            set {
                if ((this.FileSizeField.Equals(value) != true)) {
                    this.FileSizeField = value;
                    this.RaisePropertyChanged("FileSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IndexCount {
            get {
                return this.IndexCountField;
            }
            set {
                if ((this.IndexCountField.Equals(value) != true)) {
                    this.IndexCountField = value;
                    this.RaisePropertyChanged("IndexCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long IndexSize {
            get {
                return this.IndexSizeField;
            }
            set {
                if ((this.IndexSizeField.Equals(value) != true)) {
                    this.IndexSizeField = value;
                    this.RaisePropertyChanged("IndexSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ObjectCount {
            get {
                return this.ObjectCountField;
            }
            set {
                if ((this.ObjectCountField.Equals(value) != true)) {
                    this.ObjectCountField = value;
                    this.RaisePropertyChanged("ObjectCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long StorageSize {
            get {
                return this.StorageSizeField;
            }
            set {
                if ((this.StorageSizeField.Equals(value) != true)) {
                    this.StorageSizeField = value;
                    this.RaisePropertyChanged("StorageSize");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CollectionInfo", Namespace="Adhesive.Mongodb")]
    public partial class CollectionInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.CascadeFilterColumnInfo> CascadeFilterColumnsField;
        
        private string CollectionNameField;
        
        private Adhesive.Mongodb.Silverlight.Service.CollectionStatus CollectionStatusField;
        
        private System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.ListFilterColumnInfo> ListFilterColumnsField;
        
        private System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TextboxFilterColumnInfo> TextboxFilterColumnsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.CascadeFilterColumnInfo> CascadeFilterColumns {
            get {
                return this.CascadeFilterColumnsField;
            }
            set {
                if ((object.ReferenceEquals(this.CascadeFilterColumnsField, value) != true)) {
                    this.CascadeFilterColumnsField = value;
                    this.RaisePropertyChanged("CascadeFilterColumns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CollectionName {
            get {
                return this.CollectionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CollectionNameField, value) != true)) {
                    this.CollectionNameField = value;
                    this.RaisePropertyChanged("CollectionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Adhesive.Mongodb.Silverlight.Service.CollectionStatus CollectionStatus {
            get {
                return this.CollectionStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.CollectionStatusField, value) != true)) {
                    this.CollectionStatusField = value;
                    this.RaisePropertyChanged("CollectionStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.ListFilterColumnInfo> ListFilterColumns {
            get {
                return this.ListFilterColumnsField;
            }
            set {
                if ((object.ReferenceEquals(this.ListFilterColumnsField, value) != true)) {
                    this.ListFilterColumnsField = value;
                    this.RaisePropertyChanged("ListFilterColumns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TextboxFilterColumnInfo> TextboxFilterColumns {
            get {
                return this.TextboxFilterColumnsField;
            }
            set {
                if ((object.ReferenceEquals(this.TextboxFilterColumnsField, value) != true)) {
                    this.TextboxFilterColumnsField = value;
                    this.RaisePropertyChanged("TextboxFilterColumns");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CollectionStatus", Namespace="Adhesive.Mongodb")]
    public partial class CollectionStatus : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double AverageObjectSizeField;
        
        private long DataSizeField;
        
        private int ExtentCountField;
        
        private int FlagsField;
        
        private int IndexCountField;
        
        private System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.IndexStatus> IndexStatusListField;
        
        private System.DateTime LastEnsureIndexTimeField;
        
        private long LastExtentSizeField;
        
        private string NamespaceField;
        
        private long ObjectCountField;
        
        private double PaddingFactorField;
        
        private long StorageSizeField;
        
        private long TotalIndexSizeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AverageObjectSize {
            get {
                return this.AverageObjectSizeField;
            }
            set {
                if ((this.AverageObjectSizeField.Equals(value) != true)) {
                    this.AverageObjectSizeField = value;
                    this.RaisePropertyChanged("AverageObjectSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DataSize {
            get {
                return this.DataSizeField;
            }
            set {
                if ((this.DataSizeField.Equals(value) != true)) {
                    this.DataSizeField = value;
                    this.RaisePropertyChanged("DataSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExtentCount {
            get {
                return this.ExtentCountField;
            }
            set {
                if ((this.ExtentCountField.Equals(value) != true)) {
                    this.ExtentCountField = value;
                    this.RaisePropertyChanged("ExtentCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Flags {
            get {
                return this.FlagsField;
            }
            set {
                if ((this.FlagsField.Equals(value) != true)) {
                    this.FlagsField = value;
                    this.RaisePropertyChanged("Flags");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IndexCount {
            get {
                return this.IndexCountField;
            }
            set {
                if ((this.IndexCountField.Equals(value) != true)) {
                    this.IndexCountField = value;
                    this.RaisePropertyChanged("IndexCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.IndexStatus> IndexStatusList {
            get {
                return this.IndexStatusListField;
            }
            set {
                if ((object.ReferenceEquals(this.IndexStatusListField, value) != true)) {
                    this.IndexStatusListField = value;
                    this.RaisePropertyChanged("IndexStatusList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastEnsureIndexTime {
            get {
                return this.LastEnsureIndexTimeField;
            }
            set {
                if ((this.LastEnsureIndexTimeField.Equals(value) != true)) {
                    this.LastEnsureIndexTimeField = value;
                    this.RaisePropertyChanged("LastEnsureIndexTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long LastExtentSize {
            get {
                return this.LastExtentSizeField;
            }
            set {
                if ((this.LastExtentSizeField.Equals(value) != true)) {
                    this.LastExtentSizeField = value;
                    this.RaisePropertyChanged("LastExtentSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Namespace {
            get {
                return this.NamespaceField;
            }
            set {
                if ((object.ReferenceEquals(this.NamespaceField, value) != true)) {
                    this.NamespaceField = value;
                    this.RaisePropertyChanged("Namespace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ObjectCount {
            get {
                return this.ObjectCountField;
            }
            set {
                if ((this.ObjectCountField.Equals(value) != true)) {
                    this.ObjectCountField = value;
                    this.RaisePropertyChanged("ObjectCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PaddingFactor {
            get {
                return this.PaddingFactorField;
            }
            set {
                if ((this.PaddingFactorField.Equals(value) != true)) {
                    this.PaddingFactorField = value;
                    this.RaisePropertyChanged("PaddingFactor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long StorageSize {
            get {
                return this.StorageSizeField;
            }
            set {
                if ((this.StorageSizeField.Equals(value) != true)) {
                    this.StorageSizeField = value;
                    this.RaisePropertyChanged("StorageSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TotalIndexSize {
            get {
                return this.TotalIndexSizeField;
            }
            set {
                if ((this.TotalIndexSizeField.Equals(value) != true)) {
                    this.TotalIndexSizeField = value;
                    this.RaisePropertyChanged("TotalIndexSize");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CascadeFilterColumnInfo", Namespace="Adhesive.Mongodb")]
    public partial class CascadeFilterColumnInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ColumnNameField;
        
        private System.Collections.Generic.List<string> DistinctValuesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ColumnName {
            get {
                return this.ColumnNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnNameField, value) != true)) {
                    this.ColumnNameField = value;
                    this.RaisePropertyChanged("ColumnName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> DistinctValues {
            get {
                return this.DistinctValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.DistinctValuesField, value) != true)) {
                    this.DistinctValuesField = value;
                    this.RaisePropertyChanged("DistinctValues");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListFilterColumnInfo", Namespace="Adhesive.Mongodb")]
    public partial class ListFilterColumnInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ColumnNameField;
        
        private System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.ItemPair> DistinctValuesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ColumnName {
            get {
                return this.ColumnNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnNameField, value) != true)) {
                    this.ColumnNameField = value;
                    this.RaisePropertyChanged("ColumnName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.ItemPair> DistinctValues {
            get {
                return this.DistinctValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.DistinctValuesField, value) != true)) {
                    this.DistinctValuesField = value;
                    this.RaisePropertyChanged("DistinctValues");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TextboxFilterColumnInfo", Namespace="Adhesive.Mongodb")]
    public partial class TextboxFilterColumnInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ColumnNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ColumnName {
            get {
                return this.ColumnNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnNameField, value) != true)) {
                    this.ColumnNameField = value;
                    this.RaisePropertyChanged("ColumnName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IndexStatus", Namespace="Adhesive.Mongodb")]
    public partial class IndexStatus : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private string NamespaceField;
        
        private long SizeField;
        
        private bool UniqueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Namespace {
            get {
                return this.NamespaceField;
            }
            set {
                if ((object.ReferenceEquals(this.NamespaceField, value) != true)) {
                    this.NamespaceField = value;
                    this.RaisePropertyChanged("Namespace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Unique {
            get {
                return this.UniqueField;
            }
            set {
                if ((this.UniqueField.Equals(value) != true)) {
                    this.UniqueField = value;
                    this.RaisePropertyChanged("Unique");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ItemPair", Namespace="Adhesive.Mongodb")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.Entity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.AlarmStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.AlarmItem>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.AlarmItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.AlarmProcessItem>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.AlarmProcessItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.MongodbCascadeFilterOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.MongodbFilterOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.MongodbIndexOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.MongodbSortOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Detail>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.Detail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.CascadeFilterType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.ListFilterType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.OperationLog))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.GetAlarmItemsResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<Adhesive.Mongodb.Silverlight.Service.MongodbServerUrl, Adhesive.Mongodb.Silverlight.Service.ServerInfo>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, Adhesive.Mongodb.Silverlight.Service.MongodbAdminDatabaseConfigurationItem>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, Adhesive.Mongodb.Silverlight.Service.MongodbAdminTableConfigurationItem>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, object>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<Adhesive.Mongodb.Silverlight.Service.GroupItemValuePair, int>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Category>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.Category))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.SubCategory>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.SubCategory))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.MongodbServerUrl))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.ServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.DatabaseInfo>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.DatabaseInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.CollectionInfo>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.CollectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.CascadeFilterColumnInfo>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.CascadeFilterColumnInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.CollectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.IndexStatus>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.IndexStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.ListFilterColumnInfo>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.ListFilterColumnInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.ItemPair>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TextboxFilterColumnInfo>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.TextboxFilterColumnInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.DatabaseStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.MongodbDatabaseDescription>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.MongodbDatabaseDescription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.MongodbColumnDescription>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.MongodbColumnDescription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.MongodbEnumColumnDescription>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.MongodbEnumColumnDescription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.DetailData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.MongodbAdminDatabaseConfigurationItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.MongodbAdminTableConfigurationItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.FilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.CascadeFilter>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.CascadeFilter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.Filter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.ListFilter>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.ListFilter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TextboxFilter>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.TextboxFilter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TableData>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.TableData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Table>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.Table))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Statistics>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.Statistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.StatisticsItem>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.StatisticsItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Group>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.Group))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.GroupItem>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.GroupItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.GroupItemValuePair))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem>))]
    public partial class ItemPair : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private object ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlarmStatus", Namespace="http://schemas.datacontract.org/2004/07/Adhesive.Alarm.Common")]
    public enum AlarmStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Open = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Handling = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Closed = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MongodbCascadeFilterOption", Namespace="http://schemas.datacontract.org/2004/07/Adhesive.Mongodb")]
    public enum MongodbCascadeFilterOption : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LevelOne = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LevelTwo = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LevelThree = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MongodbFilterOption", Namespace="http://schemas.datacontract.org/2004/07/Adhesive.Mongodb")]
    public enum MongodbFilterOption : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DropDownListFilter = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CheckBoxListFilter = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TextBoxFilter = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MongodbIndexOption", Namespace="http://schemas.datacontract.org/2004/07/Adhesive.Mongodb")]
    public enum MongodbIndexOption : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ascending = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Descending = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AscendingAndUnique = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DescendingAndUnique = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MongodbSortOption", Namespace="http://schemas.datacontract.org/2004/07/Adhesive.Mongodb")]
    public enum MongodbSortOption : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ascending = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Descending = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Detail", Namespace="http://schemas.datacontract.org/2004/07/Adhesive.Mongodb")]
    public partial class Detail : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ColumnNameField;
        
        private string DescriptionField;
        
        private string DisplayNameField;
        
        private System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Detail> SubDetailsField;
        
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ColumnName {
            get {
                return this.ColumnNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnNameField, value) != true)) {
                    this.ColumnNameField = value;
                    this.RaisePropertyChanged("ColumnName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Detail> SubDetails {
            get {
                return this.SubDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.SubDetailsField, value) != true)) {
                    this.SubDetailsField = value;
                    this.RaisePropertyChanged("SubDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CascadeFilterType", Namespace="http://schemas.datacontract.org/2004/07/Adhesive.Mongodb")]
    public enum CascadeFilterType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LevelOne = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LevelTwo = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LevelThree = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListFilterType", Namespace="http://schemas.datacontract.org/2004/07/Adhesive.Mongodb")]
    public enum ListFilterType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Select = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MultipleSelect = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetAlarmItemsResult", Namespace="http://schemas.datacontract.org/2004/07/Adhesive.Mongodb.Silverlight.Web")]
    public partial class GetAlarmItemsResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int CountField;
        
        private System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.AlarmItem> DataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.AlarmItem> Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MongodbAdminDatabaseConfigurationItem", Namespace="Adhesive.Mongodb")]
    public partial class MongodbAdminDatabaseConfigurationItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DatabasePrefixField;
        
        private System.Collections.Generic.Dictionary<string, Adhesive.Mongodb.Silverlight.Service.MongodbAdminTableConfigurationItem> MongodbAdminTableConfigurationItemsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DatabasePrefix {
            get {
                return this.DatabasePrefixField;
            }
            set {
                if ((object.ReferenceEquals(this.DatabasePrefixField, value) != true)) {
                    this.DatabasePrefixField = value;
                    this.RaisePropertyChanged("DatabasePrefix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, Adhesive.Mongodb.Silverlight.Service.MongodbAdminTableConfigurationItem> MongodbAdminTableConfigurationItems {
            get {
                return this.MongodbAdminTableConfigurationItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.MongodbAdminTableConfigurationItemsField, value) != true)) {
                    this.MongodbAdminTableConfigurationItemsField = value;
                    this.RaisePropertyChanged("MongodbAdminTableConfigurationItems");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MongodbAdminTableConfigurationItem", Namespace="Adhesive.Mongodb")]
    public partial class MongodbAdminTableConfigurationItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string TableNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TableName {
            get {
                return this.TableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TableNameField, value) != true)) {
                    this.TableNameField = value;
                    this.RaisePropertyChanged("TableName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupItemValuePair", Namespace="Adhesive.Mongodb")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.Entity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.AlarmStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.AlarmItem>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.AlarmItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.AlarmProcessItem>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.AlarmProcessItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.MongodbCascadeFilterOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.MongodbFilterOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.MongodbIndexOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.MongodbSortOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Detail>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.Detail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.CascadeFilterType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.ListFilterType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.OperationLog))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.GetAlarmItemsResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<Adhesive.Mongodb.Silverlight.Service.MongodbServerUrl, Adhesive.Mongodb.Silverlight.Service.ServerInfo>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, Adhesive.Mongodb.Silverlight.Service.MongodbAdminDatabaseConfigurationItem>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, Adhesive.Mongodb.Silverlight.Service.MongodbAdminTableConfigurationItem>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, object>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<Adhesive.Mongodb.Silverlight.Service.GroupItemValuePair, int>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Category>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.Category))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.SubCategory>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.SubCategory))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.MongodbServerUrl))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.ServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.DatabaseInfo>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.DatabaseInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.CollectionInfo>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.CollectionInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.CascadeFilterColumnInfo>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.CascadeFilterColumnInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.CollectionStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.IndexStatus>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.IndexStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.ListFilterColumnInfo>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.ListFilterColumnInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.ItemPair>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.ItemPair))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TextboxFilterColumnInfo>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.TextboxFilterColumnInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.DatabaseStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.MongodbDatabaseDescription>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.MongodbDatabaseDescription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.MongodbColumnDescription>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.MongodbColumnDescription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.MongodbEnumColumnDescription>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.MongodbEnumColumnDescription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.DetailData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.MongodbAdminDatabaseConfigurationItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.MongodbAdminTableConfigurationItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.FilterData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.CascadeFilter>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.CascadeFilter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.Filter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.ListFilter>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.ListFilter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TextboxFilter>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.TextboxFilter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TableData>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.TableData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Table>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.Table))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Statistics>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.Statistics))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.StatisticsItem>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.StatisticsItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Group>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.Group))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.GroupItem>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.GroupItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem>))]
    public partial class GroupItemValuePair : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DisplayNameField;
        
        private object NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MongodbColumnDescription", Namespace="Adhesive.Mongodb")]
    public partial class MongodbColumnDescription : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ColumnNameField;
        
        private string DescriptionField;
        
        private string DisplayNameField;
        
        private bool IsArrayColumnField;
        
        private bool IsContextIdentityColumnField;
        
        private bool IsEntityColumnField;
        
        private bool IsPrimaryKeyField;
        
        private bool IsTableColumnField;
        
        private bool IsTimeColumnField;
        
        private Adhesive.Mongodb.Silverlight.Service.MongodbCascadeFilterOption MongodbCascadeFilterOptionField;
        
        private Adhesive.Mongodb.Silverlight.Service.MongodbFilterOption MongodbFilterOptionField;
        
        private Adhesive.Mongodb.Silverlight.Service.MongodbIndexOption MongodbIndexOptionField;
        
        private Adhesive.Mongodb.Silverlight.Service.MongodbSortOption MongodbSortOptionField;
        
        private string NameField;
        
        private bool ShowInTableViewField;
        
        private string TypeNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ColumnName {
            get {
                return this.ColumnNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnNameField, value) != true)) {
                    this.ColumnNameField = value;
                    this.RaisePropertyChanged("ColumnName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsArrayColumn {
            get {
                return this.IsArrayColumnField;
            }
            set {
                if ((this.IsArrayColumnField.Equals(value) != true)) {
                    this.IsArrayColumnField = value;
                    this.RaisePropertyChanged("IsArrayColumn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsContextIdentityColumn {
            get {
                return this.IsContextIdentityColumnField;
            }
            set {
                if ((this.IsContextIdentityColumnField.Equals(value) != true)) {
                    this.IsContextIdentityColumnField = value;
                    this.RaisePropertyChanged("IsContextIdentityColumn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEntityColumn {
            get {
                return this.IsEntityColumnField;
            }
            set {
                if ((this.IsEntityColumnField.Equals(value) != true)) {
                    this.IsEntityColumnField = value;
                    this.RaisePropertyChanged("IsEntityColumn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPrimaryKey {
            get {
                return this.IsPrimaryKeyField;
            }
            set {
                if ((this.IsPrimaryKeyField.Equals(value) != true)) {
                    this.IsPrimaryKeyField = value;
                    this.RaisePropertyChanged("IsPrimaryKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsTableColumn {
            get {
                return this.IsTableColumnField;
            }
            set {
                if ((this.IsTableColumnField.Equals(value) != true)) {
                    this.IsTableColumnField = value;
                    this.RaisePropertyChanged("IsTableColumn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsTimeColumn {
            get {
                return this.IsTimeColumnField;
            }
            set {
                if ((this.IsTimeColumnField.Equals(value) != true)) {
                    this.IsTimeColumnField = value;
                    this.RaisePropertyChanged("IsTimeColumn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Adhesive.Mongodb.Silverlight.Service.MongodbCascadeFilterOption MongodbCascadeFilterOption {
            get {
                return this.MongodbCascadeFilterOptionField;
            }
            set {
                if ((this.MongodbCascadeFilterOptionField.Equals(value) != true)) {
                    this.MongodbCascadeFilterOptionField = value;
                    this.RaisePropertyChanged("MongodbCascadeFilterOption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Adhesive.Mongodb.Silverlight.Service.MongodbFilterOption MongodbFilterOption {
            get {
                return this.MongodbFilterOptionField;
            }
            set {
                if ((this.MongodbFilterOptionField.Equals(value) != true)) {
                    this.MongodbFilterOptionField = value;
                    this.RaisePropertyChanged("MongodbFilterOption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Adhesive.Mongodb.Silverlight.Service.MongodbIndexOption MongodbIndexOption {
            get {
                return this.MongodbIndexOptionField;
            }
            set {
                if ((this.MongodbIndexOptionField.Equals(value) != true)) {
                    this.MongodbIndexOptionField = value;
                    this.RaisePropertyChanged("MongodbIndexOption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Adhesive.Mongodb.Silverlight.Service.MongodbSortOption MongodbSortOption {
            get {
                return this.MongodbSortOptionField;
            }
            set {
                if ((this.MongodbSortOptionField.Equals(value) != true)) {
                    this.MongodbSortOptionField = value;
                    this.RaisePropertyChanged("MongodbSortOption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShowInTableView {
            get {
                return this.ShowInTableViewField;
            }
            set {
                if ((this.ShowInTableViewField.Equals(value) != true)) {
                    this.ShowInTableViewField = value;
                    this.RaisePropertyChanged("ShowInTableView");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeName {
            get {
                return this.TypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNameField, value) != true)) {
                    this.TypeNameField = value;
                    this.RaisePropertyChanged("TypeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MongodbEnumColumnDescription", Namespace="Adhesive.Mongodb")]
    public partial class MongodbEnumColumnDescription : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.Dictionary<string, string> EnumItemsField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> EnumItems {
            get {
                return this.EnumItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.EnumItemsField, value) != true)) {
                    this.EnumItemsField = value;
                    this.RaisePropertyChanged("EnumItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DetailData", Namespace="Adhesive.Mongodb")]
    public partial class DetailData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Detail> DataField;
        
        private string DatabaseNameField;
        
        private string DatabasePrefixField;
        
        private string PkColumnNameField;
        
        private string TableNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Detail> Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DatabaseName {
            get {
                return this.DatabaseNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DatabaseNameField, value) != true)) {
                    this.DatabaseNameField = value;
                    this.RaisePropertyChanged("DatabaseName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DatabasePrefix {
            get {
                return this.DatabasePrefixField;
            }
            set {
                if ((object.ReferenceEquals(this.DatabasePrefixField, value) != true)) {
                    this.DatabasePrefixField = value;
                    this.RaisePropertyChanged("DatabasePrefix");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PkColumnName {
            get {
                return this.PkColumnNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PkColumnNameField, value) != true)) {
                    this.PkColumnNameField = value;
                    this.RaisePropertyChanged("PkColumnName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TableName {
            get {
                return this.TableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TableNameField, value) != true)) {
                    this.TableNameField = value;
                    this.RaisePropertyChanged("TableName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MongodbAdminConfigurationItem", Namespace="Adhesive.Mongodb")]
    public partial class MongodbAdminConfigurationItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string IPField;
        
        private string MailAddressField;
        
        private string MobileNumberField;
        
        private System.Collections.Generic.Dictionary<string, Adhesive.Mongodb.Silverlight.Service.MongodbAdminDatabaseConfigurationItem> MongodbAdminDatabaseConfigurationItemsField;
        
        private string PasswordField;
        
        private string RealNameField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IP {
            get {
                return this.IPField;
            }
            set {
                if ((object.ReferenceEquals(this.IPField, value) != true)) {
                    this.IPField = value;
                    this.RaisePropertyChanged("IP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MailAddress {
            get {
                return this.MailAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.MailAddressField, value) != true)) {
                    this.MailAddressField = value;
                    this.RaisePropertyChanged("MailAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MobileNumber {
            get {
                return this.MobileNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.MobileNumberField, value) != true)) {
                    this.MobileNumberField = value;
                    this.RaisePropertyChanged("MobileNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, Adhesive.Mongodb.Silverlight.Service.MongodbAdminDatabaseConfigurationItem> MongodbAdminDatabaseConfigurationItems {
            get {
                return this.MongodbAdminDatabaseConfigurationItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.MongodbAdminDatabaseConfigurationItemsField, value) != true)) {
                    this.MongodbAdminDatabaseConfigurationItemsField = value;
                    this.RaisePropertyChanged("MongodbAdminDatabaseConfigurationItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RealName {
            get {
                return this.RealNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RealNameField, value) != true)) {
                    this.RealNameField = value;
                    this.RaisePropertyChanged("RealName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FilterData", Namespace="Adhesive.Mongodb")]
    public partial class FilterData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.CascadeFilter> CascadeFiltersField;
        
        private System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.ListFilter> ListFiltersField;
        
        private System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TextboxFilter> TextboxFiltersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.CascadeFilter> CascadeFilters {
            get {
                return this.CascadeFiltersField;
            }
            set {
                if ((object.ReferenceEquals(this.CascadeFiltersField, value) != true)) {
                    this.CascadeFiltersField = value;
                    this.RaisePropertyChanged("CascadeFilters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.ListFilter> ListFilters {
            get {
                return this.ListFiltersField;
            }
            set {
                if ((object.ReferenceEquals(this.ListFiltersField, value) != true)) {
                    this.ListFiltersField = value;
                    this.RaisePropertyChanged("ListFilters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TextboxFilter> TextboxFilters {
            get {
                return this.TextboxFiltersField;
            }
            set {
                if ((object.ReferenceEquals(this.TextboxFiltersField, value) != true)) {
                    this.TextboxFiltersField = value;
                    this.RaisePropertyChanged("TextboxFilters");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CascadeFilter", Namespace="Adhesive.Mongodb")]
    public partial class CascadeFilter : Adhesive.Mongodb.Silverlight.Service.Filter {
        
        private Adhesive.Mongodb.Silverlight.Service.CascadeFilterType CascadeFilterTypeField;
        
        private System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> ItemsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Adhesive.Mongodb.Silverlight.Service.CascadeFilterType CascadeFilterType {
            get {
                return this.CascadeFilterTypeField;
            }
            set {
                if ((this.CascadeFilterTypeField.Equals(value) != true)) {
                    this.CascadeFilterTypeField = value;
                    this.RaisePropertyChanged("CascadeFilterType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Filter", Namespace="Adhesive.Mongodb")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.ListFilter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.TextboxFilter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Adhesive.Mongodb.Silverlight.Service.CascadeFilter))]
    public partial class Filter : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ColumnNameField;
        
        private string DescriptionField;
        
        private string DisplayNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ColumnName {
            get {
                return this.ColumnNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnNameField, value) != true)) {
                    this.ColumnNameField = value;
                    this.RaisePropertyChanged("ColumnName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListFilter", Namespace="Adhesive.Mongodb")]
    public partial class ListFilter : Adhesive.Mongodb.Silverlight.Service.Filter {
        
        private System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.ItemPair> ItemsField;
        
        private Adhesive.Mongodb.Silverlight.Service.ListFilterType ListFilterTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.ItemPair> Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Adhesive.Mongodb.Silverlight.Service.ListFilterType ListFilterType {
            get {
                return this.ListFilterTypeField;
            }
            set {
                if ((this.ListFilterTypeField.Equals(value) != true)) {
                    this.ListFilterTypeField = value;
                    this.RaisePropertyChanged("ListFilterType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TextboxFilter", Namespace="Adhesive.Mongodb")]
    public partial class TextboxFilter : Adhesive.Mongodb.Silverlight.Service.Filter {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TableData", Namespace="Adhesive.Mongodb")]
    public partial class TableData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string PkColumnDisplayNameField;
        
        private string PkColumnNameField;
        
        private string TableNameField;
        
        private System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Table> TablesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PkColumnDisplayName {
            get {
                return this.PkColumnDisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PkColumnDisplayNameField, value) != true)) {
                    this.PkColumnDisplayNameField = value;
                    this.RaisePropertyChanged("PkColumnDisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PkColumnName {
            get {
                return this.PkColumnNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PkColumnNameField, value) != true)) {
                    this.PkColumnNameField = value;
                    this.RaisePropertyChanged("PkColumnName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TableName {
            get {
                return this.TableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TableNameField, value) != true)) {
                    this.TableNameField = value;
                    this.RaisePropertyChanged("TableName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Table> Tables {
            get {
                return this.TablesField;
            }
            set {
                if ((object.ReferenceEquals(this.TablesField, value) != true)) {
                    this.TablesField = value;
                    this.RaisePropertyChanged("Tables");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Table", Namespace="Adhesive.Mongodb")]
    public partial class Table : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> DataField;
        
        private string DatabaseNameField;
        
        private string DatabasePrefixField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DatabaseName {
            get {
                return this.DatabaseNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DatabaseNameField, value) != true)) {
                    this.DatabaseNameField = value;
                    this.RaisePropertyChanged("DatabaseName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DatabasePrefix {
            get {
                return this.DatabasePrefixField;
            }
            set {
                if ((object.ReferenceEquals(this.DatabasePrefixField, value) != true)) {
                    this.DatabasePrefixField = value;
                    this.RaisePropertyChanged("DatabasePrefix");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Statistics", Namespace="Adhesive.Mongodb")]
    public partial class Statistics : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.StatisticsItem> StatisticsItemsField;
        
        private string TableNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.StatisticsItem> StatisticsItems {
            get {
                return this.StatisticsItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.StatisticsItemsField, value) != true)) {
                    this.StatisticsItemsField = value;
                    this.RaisePropertyChanged("StatisticsItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TableName {
            get {
                return this.TableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TableNameField, value) != true)) {
                    this.TableNameField = value;
                    this.RaisePropertyChanged("TableName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatisticsItem", Namespace="Adhesive.Mongodb")]
    public partial class StatisticsItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime BeginTimeField;
        
        private System.DateTime EndTimeField;
        
        private int ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BeginTime {
            get {
                return this.BeginTimeField;
            }
            set {
                if ((this.BeginTimeField.Equals(value) != true)) {
                    this.BeginTimeField = value;
                    this.RaisePropertyChanged("BeginTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Group", Namespace="Adhesive.Mongodb")]
    public partial class Group : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.GroupItem> GroupItemsField;
        
        private string TableNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.GroupItem> GroupItems {
            get {
                return this.GroupItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupItemsField, value) != true)) {
                    this.GroupItemsField = value;
                    this.RaisePropertyChanged("GroupItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TableName {
            get {
                return this.TableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TableNameField, value) != true)) {
                    this.TableNameField = value;
                    this.RaisePropertyChanged("TableName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupItem", Namespace="Adhesive.Mongodb")]
    public partial class GroupItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private string DisplayNameField;
        
        private string NameField;
        
        private System.Collections.Generic.Dictionary<Adhesive.Mongodb.Silverlight.Service.GroupItemValuePair, int> ValuesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<Adhesive.Mongodb.Silverlight.Service.GroupItemValuePair, int> Values {
            get {
                return this.ValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ValuesField, value) != true)) {
                    this.ValuesField = value;
                    this.RaisePropertyChanged("Values");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.DataService")]
    public interface DataService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DataService/Log", ReplyAction="http://tempuri.org/DataService/LogResponse")]
        System.IAsyncResult BeginLog(Adhesive.Mongodb.Silverlight.Service.OperationLog log, System.AsyncCallback callback, object asyncState);
        
        void EndLog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DataService/GetCategoryData", ReplyAction="http://tempuri.org/DataService/GetCategoryDataResponse")]
        System.IAsyncResult BeginGetCategoryData(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Category> EndGetCategoryData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DataService/GetServerInfo", ReplyAction="http://tempuri.org/DataService/GetServerInfoResponse")]
        System.IAsyncResult BeginGetServerInfo(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<Adhesive.Mongodb.Silverlight.Service.MongodbServerUrl, Adhesive.Mongodb.Silverlight.Service.ServerInfo> EndGetServerInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DataService/GetDetailDataOnlyById", ReplyAction="http://tempuri.org/DataService/GetDetailDataOnlyByIdResponse")]
        System.IAsyncResult BeginGetDetailDataOnlyById(string databasePrefix, string Id, System.AsyncCallback callback, object asyncState);
        
        Adhesive.Mongodb.Silverlight.Service.DetailData EndGetDetailDataOnlyById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DataService/GetAdminConfiguration", ReplyAction="http://tempuri.org/DataService/GetAdminConfigurationResponse")]
        System.IAsyncResult BeginGetAdminConfiguration(string username, string password, System.AsyncCallback callback, object asyncState);
        
        Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem EndGetAdminConfiguration(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DataService/GetFilterData", ReplyAction="http://tempuri.org/DataService/GetFilterDataResponse")]
        System.IAsyncResult BeginGetFilterData(string databasePrefix, System.Collections.Generic.List<string> tableNames, System.DateTime beginTime, System.DateTime endTime, System.AsyncCallback callback, object asyncState);
        
        Adhesive.Mongodb.Silverlight.Service.FilterData EndGetFilterData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DataService/GetTableData", ReplyAction="http://tempuri.org/DataService/GetTableDataResponse")]
        System.IAsyncResult BeginGetTableData(string databasePrefix, System.Collections.Generic.List<string> tableNames, System.DateTime beginTime, System.DateTime endTime, int pageIndex, int pageSize, System.Collections.Generic.Dictionary<string, object> filters, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TableData> EndGetTableData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DataService/GetTableDataByContextId", ReplyAction="http://tempuri.org/DataService/GetTableDataByContextIdResponse")]
        System.IAsyncResult BeginGetTableDataByContextId(string contextId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TableData> EndGetTableDataByContextId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DataService/GetStatisticsData", ReplyAction="http://tempuri.org/DataService/GetStatisticsDataResponse")]
        System.IAsyncResult BeginGetStatisticsData(string databasePrefix, System.Collections.Generic.List<string> tableNames, System.DateTime beginTime, System.DateTime endTime, System.TimeSpan span, System.Collections.Generic.Dictionary<string, object> filters, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Statistics> EndGetStatisticsData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DataService/GetDetailData", ReplyAction="http://tempuri.org/DataService/GetDetailDataResponse")]
        System.IAsyncResult BeginGetDetailData(string databasePrefix, string databaseName, string tableName, string pkcolumnName, string Id, System.AsyncCallback callback, object asyncState);
        
        Adhesive.Mongodb.Silverlight.Service.DetailData EndGetDetailData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DataService/GetGroupData", ReplyAction="http://tempuri.org/DataService/GetGroupDataResponse")]
        System.IAsyncResult BeginGetGroupData(string databasePrefix, System.Collections.Generic.List<string> tableNames, System.DateTime beginTime, System.DateTime endTime, System.Collections.Generic.Dictionary<string, object> filters, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Group> EndGetGroupData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DataService/GetStateData", ReplyAction="http://tempuri.org/DataService/GetStateDataResponse")]
        System.IAsyncResult BeginGetStateData(string databasePrefix, string tableName, System.DateTime beginTime, System.DateTime endTime, System.Collections.Generic.Dictionary<string, object> filters, System.AsyncCallback callback, object asyncState);
        
        Adhesive.Mongodb.Silverlight.Service.DetailData EndGetStateData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DataService/GetAlarmItems", ReplyAction="http://tempuri.org/DataService/GetAlarmItemsResponse")]
        System.IAsyncResult BeginGetAlarmItems(Adhesive.Mongodb.Silverlight.Service.AlarmStatus status, Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem admin, int pageSize, int pageIndex, System.AsyncCallback callback, object asyncState);
        
        Adhesive.Mongodb.Silverlight.Service.GetAlarmItemsResult EndGetAlarmItems(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DataService/GetAlarmProcessItem", ReplyAction="http://tempuri.org/DataService/GetAlarmProcessItemResponse")]
        System.IAsyncResult BeginGetAlarmProcessItem(string id, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.AlarmProcessItem> EndGetAlarmProcessItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DataService/GetAlarmGroup", ReplyAction="http://tempuri.org/DataService/GetAlarmGroupResponse")]
        System.IAsyncResult BeginGetAlarmGroup(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<string> EndGetAlarmGroup(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DataService/GetAlarmReceivers", ReplyAction="http://tempuri.org/DataService/GetAlarmReceiversResponse")]
        System.IAsyncResult BeginGetAlarmReceivers(string groupName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem> EndGetAlarmReceivers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DataService/SendMessage", ReplyAction="http://tempuri.org/DataService/SendMessageResponse")]
        System.IAsyncResult BeginSendMessage(string configName, string mobileMessage, string mailMessage, System.AsyncCallback callback, object asyncState);
        
        void EndSendMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DataService/SendMobile", ReplyAction="http://tempuri.org/DataService/SendMobileResponse")]
        System.IAsyncResult BeginSendMobile(System.Collections.Generic.List<string> userNames, string Message, System.AsyncCallback callback, object asyncState);
        
        void EndSendMobile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DataService/SendEmail", ReplyAction="http://tempuri.org/DataService/SendEmailResponse")]
        System.IAsyncResult BeginSendEmail(System.Collections.Generic.List<string> userNames, string Message, System.AsyncCallback callback, object asyncState);
        
        void EndSendEmail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DataService/HandleAlarmEvent", ReplyAction="http://tempuri.org/DataService/HandleAlarmEventResponse")]
        System.IAsyncResult BeginHandleAlarmEvent(string id, string mobileMessage, string mailMessage, string userName, string userRealName, System.AsyncCallback callback, object asyncState);
        
        void EndHandleAlarmEvent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/DataService/CloseAlarmEvent", ReplyAction="http://tempuri.org/DataService/CloseAlarmEventResponse")]
        System.IAsyncResult BeginCloseAlarmEvent(string id, string mobileMessage, string mailMessage, string userName, string userRealName, System.AsyncCallback callback, object asyncState);
        
        void EndCloseAlarmEvent(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DataServiceChannel : Adhesive.Mongodb.Silverlight.Service.DataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCategoryDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCategoryDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Category> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Category>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServerInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServerInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<Adhesive.Mongodb.Silverlight.Service.MongodbServerUrl, Adhesive.Mongodb.Silverlight.Service.ServerInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<Adhesive.Mongodb.Silverlight.Service.MongodbServerUrl, Adhesive.Mongodb.Silverlight.Service.ServerInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDetailDataOnlyByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDetailDataOnlyByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Adhesive.Mongodb.Silverlight.Service.DetailData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Adhesive.Mongodb.Silverlight.Service.DetailData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAdminConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAdminConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFilterDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFilterDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Adhesive.Mongodb.Silverlight.Service.FilterData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Adhesive.Mongodb.Silverlight.Service.FilterData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTableDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTableDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TableData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TableData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTableDataByContextIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTableDataByContextIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TableData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TableData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStatisticsDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStatisticsDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Statistics> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Statistics>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDetailDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDetailDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Adhesive.Mongodb.Silverlight.Service.DetailData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Adhesive.Mongodb.Silverlight.Service.DetailData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetGroupDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetGroupDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Group> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Group>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStateDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStateDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Adhesive.Mongodb.Silverlight.Service.DetailData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Adhesive.Mongodb.Silverlight.Service.DetailData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAlarmItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAlarmItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Adhesive.Mongodb.Silverlight.Service.GetAlarmItemsResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Adhesive.Mongodb.Silverlight.Service.GetAlarmItemsResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAlarmProcessItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAlarmProcessItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.AlarmProcessItem> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.AlarmProcessItem>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAlarmGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAlarmGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAlarmReceiversCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAlarmReceiversCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataServiceClient : System.ServiceModel.ClientBase<Adhesive.Mongodb.Silverlight.Service.DataService>, Adhesive.Mongodb.Silverlight.Service.DataService {
        
        private BeginOperationDelegate onBeginLogDelegate;
        
        private EndOperationDelegate onEndLogDelegate;
        
        private System.Threading.SendOrPostCallback onLogCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCategoryDataDelegate;
        
        private EndOperationDelegate onEndGetCategoryDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetCategoryDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServerInfoDelegate;
        
        private EndOperationDelegate onEndGetServerInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetServerInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDetailDataOnlyByIdDelegate;
        
        private EndOperationDelegate onEndGetDetailDataOnlyByIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetDetailDataOnlyByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAdminConfigurationDelegate;
        
        private EndOperationDelegate onEndGetAdminConfigurationDelegate;
        
        private System.Threading.SendOrPostCallback onGetAdminConfigurationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFilterDataDelegate;
        
        private EndOperationDelegate onEndGetFilterDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetFilterDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTableDataDelegate;
        
        private EndOperationDelegate onEndGetTableDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetTableDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTableDataByContextIdDelegate;
        
        private EndOperationDelegate onEndGetTableDataByContextIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetTableDataByContextIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStatisticsDataDelegate;
        
        private EndOperationDelegate onEndGetStatisticsDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetStatisticsDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDetailDataDelegate;
        
        private EndOperationDelegate onEndGetDetailDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetDetailDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetGroupDataDelegate;
        
        private EndOperationDelegate onEndGetGroupDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetGroupDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStateDataDelegate;
        
        private EndOperationDelegate onEndGetStateDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetStateDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAlarmItemsDelegate;
        
        private EndOperationDelegate onEndGetAlarmItemsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAlarmItemsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAlarmProcessItemDelegate;
        
        private EndOperationDelegate onEndGetAlarmProcessItemDelegate;
        
        private System.Threading.SendOrPostCallback onGetAlarmProcessItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAlarmGroupDelegate;
        
        private EndOperationDelegate onEndGetAlarmGroupDelegate;
        
        private System.Threading.SendOrPostCallback onGetAlarmGroupCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAlarmReceiversDelegate;
        
        private EndOperationDelegate onEndGetAlarmReceiversDelegate;
        
        private System.Threading.SendOrPostCallback onGetAlarmReceiversCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendMessageDelegate;
        
        private EndOperationDelegate onEndSendMessageDelegate;
        
        private System.Threading.SendOrPostCallback onSendMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendMobileDelegate;
        
        private EndOperationDelegate onEndSendMobileDelegate;
        
        private System.Threading.SendOrPostCallback onSendMobileCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendEmailDelegate;
        
        private EndOperationDelegate onEndSendEmailDelegate;
        
        private System.Threading.SendOrPostCallback onSendEmailCompletedDelegate;
        
        private BeginOperationDelegate onBeginHandleAlarmEventDelegate;
        
        private EndOperationDelegate onEndHandleAlarmEventDelegate;
        
        private System.Threading.SendOrPostCallback onHandleAlarmEventCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseAlarmEventDelegate;
        
        private EndOperationDelegate onEndCloseAlarmEventDelegate;
        
        private System.Threading.SendOrPostCallback onCloseAlarmEventCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DataServiceClient() {
        }
        
        public DataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LogCompleted;
        
        public event System.EventHandler<GetCategoryDataCompletedEventArgs> GetCategoryDataCompleted;
        
        public event System.EventHandler<GetServerInfoCompletedEventArgs> GetServerInfoCompleted;
        
        public event System.EventHandler<GetDetailDataOnlyByIdCompletedEventArgs> GetDetailDataOnlyByIdCompleted;
        
        public event System.EventHandler<GetAdminConfigurationCompletedEventArgs> GetAdminConfigurationCompleted;
        
        public event System.EventHandler<GetFilterDataCompletedEventArgs> GetFilterDataCompleted;
        
        public event System.EventHandler<GetTableDataCompletedEventArgs> GetTableDataCompleted;
        
        public event System.EventHandler<GetTableDataByContextIdCompletedEventArgs> GetTableDataByContextIdCompleted;
        
        public event System.EventHandler<GetStatisticsDataCompletedEventArgs> GetStatisticsDataCompleted;
        
        public event System.EventHandler<GetDetailDataCompletedEventArgs> GetDetailDataCompleted;
        
        public event System.EventHandler<GetGroupDataCompletedEventArgs> GetGroupDataCompleted;
        
        public event System.EventHandler<GetStateDataCompletedEventArgs> GetStateDataCompleted;
        
        public event System.EventHandler<GetAlarmItemsCompletedEventArgs> GetAlarmItemsCompleted;
        
        public event System.EventHandler<GetAlarmProcessItemCompletedEventArgs> GetAlarmProcessItemCompleted;
        
        public event System.EventHandler<GetAlarmGroupCompletedEventArgs> GetAlarmGroupCompleted;
        
        public event System.EventHandler<GetAlarmReceiversCompletedEventArgs> GetAlarmReceiversCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendMessageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendMobileCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendEmailCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> HandleAlarmEventCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseAlarmEventCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Adhesive.Mongodb.Silverlight.Service.DataService.BeginLog(Adhesive.Mongodb.Silverlight.Service.OperationLog log, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLog(log, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Adhesive.Mongodb.Silverlight.Service.DataService.EndLog(System.IAsyncResult result) {
            base.Channel.EndLog(result);
        }
        
        private System.IAsyncResult OnBeginLog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Adhesive.Mongodb.Silverlight.Service.OperationLog log = ((Adhesive.Mongodb.Silverlight.Service.OperationLog)(inValues[0]));
            return ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).BeginLog(log, callback, asyncState);
        }
        
        private object[] OnEndLog(System.IAsyncResult result) {
            ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).EndLog(result);
            return null;
        }
        
        private void OnLogCompleted(object state) {
            if ((this.LogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogAsync(Adhesive.Mongodb.Silverlight.Service.OperationLog log) {
            this.LogAsync(log, null);
        }
        
        public void LogAsync(Adhesive.Mongodb.Silverlight.Service.OperationLog log, object userState) {
            if ((this.onBeginLogDelegate == null)) {
                this.onBeginLogDelegate = new BeginOperationDelegate(this.OnBeginLog);
            }
            if ((this.onEndLogDelegate == null)) {
                this.onEndLogDelegate = new EndOperationDelegate(this.OnEndLog);
            }
            if ((this.onLogCompletedDelegate == null)) {
                this.onLogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogCompleted);
            }
            base.InvokeAsync(this.onBeginLogDelegate, new object[] {
                        log}, this.onEndLogDelegate, this.onLogCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Adhesive.Mongodb.Silverlight.Service.DataService.BeginGetCategoryData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCategoryData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Category> Adhesive.Mongodb.Silverlight.Service.DataService.EndGetCategoryData(System.IAsyncResult result) {
            return base.Channel.EndGetCategoryData(result);
        }
        
        private System.IAsyncResult OnBeginGetCategoryData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).BeginGetCategoryData(callback, asyncState);
        }
        
        private object[] OnEndGetCategoryData(System.IAsyncResult result) {
            System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Category> retVal = ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).EndGetCategoryData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCategoryDataCompleted(object state) {
            if ((this.GetCategoryDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCategoryDataCompleted(this, new GetCategoryDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCategoryDataAsync() {
            this.GetCategoryDataAsync(null);
        }
        
        public void GetCategoryDataAsync(object userState) {
            if ((this.onBeginGetCategoryDataDelegate == null)) {
                this.onBeginGetCategoryDataDelegate = new BeginOperationDelegate(this.OnBeginGetCategoryData);
            }
            if ((this.onEndGetCategoryDataDelegate == null)) {
                this.onEndGetCategoryDataDelegate = new EndOperationDelegate(this.OnEndGetCategoryData);
            }
            if ((this.onGetCategoryDataCompletedDelegate == null)) {
                this.onGetCategoryDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCategoryDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetCategoryDataDelegate, null, this.onEndGetCategoryDataDelegate, this.onGetCategoryDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Adhesive.Mongodb.Silverlight.Service.DataService.BeginGetServerInfo(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServerInfo(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<Adhesive.Mongodb.Silverlight.Service.MongodbServerUrl, Adhesive.Mongodb.Silverlight.Service.ServerInfo> Adhesive.Mongodb.Silverlight.Service.DataService.EndGetServerInfo(System.IAsyncResult result) {
            return base.Channel.EndGetServerInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetServerInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).BeginGetServerInfo(callback, asyncState);
        }
        
        private object[] OnEndGetServerInfo(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<Adhesive.Mongodb.Silverlight.Service.MongodbServerUrl, Adhesive.Mongodb.Silverlight.Service.ServerInfo> retVal = ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).EndGetServerInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServerInfoCompleted(object state) {
            if ((this.GetServerInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServerInfoCompleted(this, new GetServerInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServerInfoAsync() {
            this.GetServerInfoAsync(null);
        }
        
        public void GetServerInfoAsync(object userState) {
            if ((this.onBeginGetServerInfoDelegate == null)) {
                this.onBeginGetServerInfoDelegate = new BeginOperationDelegate(this.OnBeginGetServerInfo);
            }
            if ((this.onEndGetServerInfoDelegate == null)) {
                this.onEndGetServerInfoDelegate = new EndOperationDelegate(this.OnEndGetServerInfo);
            }
            if ((this.onGetServerInfoCompletedDelegate == null)) {
                this.onGetServerInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServerInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetServerInfoDelegate, null, this.onEndGetServerInfoDelegate, this.onGetServerInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Adhesive.Mongodb.Silverlight.Service.DataService.BeginGetDetailDataOnlyById(string databasePrefix, string Id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDetailDataOnlyById(databasePrefix, Id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Adhesive.Mongodb.Silverlight.Service.DetailData Adhesive.Mongodb.Silverlight.Service.DataService.EndGetDetailDataOnlyById(System.IAsyncResult result) {
            return base.Channel.EndGetDetailDataOnlyById(result);
        }
        
        private System.IAsyncResult OnBeginGetDetailDataOnlyById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string databasePrefix = ((string)(inValues[0]));
            string Id = ((string)(inValues[1]));
            return ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).BeginGetDetailDataOnlyById(databasePrefix, Id, callback, asyncState);
        }
        
        private object[] OnEndGetDetailDataOnlyById(System.IAsyncResult result) {
            Adhesive.Mongodb.Silverlight.Service.DetailData retVal = ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).EndGetDetailDataOnlyById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDetailDataOnlyByIdCompleted(object state) {
            if ((this.GetDetailDataOnlyByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDetailDataOnlyByIdCompleted(this, new GetDetailDataOnlyByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDetailDataOnlyByIdAsync(string databasePrefix, string Id) {
            this.GetDetailDataOnlyByIdAsync(databasePrefix, Id, null);
        }
        
        public void GetDetailDataOnlyByIdAsync(string databasePrefix, string Id, object userState) {
            if ((this.onBeginGetDetailDataOnlyByIdDelegate == null)) {
                this.onBeginGetDetailDataOnlyByIdDelegate = new BeginOperationDelegate(this.OnBeginGetDetailDataOnlyById);
            }
            if ((this.onEndGetDetailDataOnlyByIdDelegate == null)) {
                this.onEndGetDetailDataOnlyByIdDelegate = new EndOperationDelegate(this.OnEndGetDetailDataOnlyById);
            }
            if ((this.onGetDetailDataOnlyByIdCompletedDelegate == null)) {
                this.onGetDetailDataOnlyByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDetailDataOnlyByIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetDetailDataOnlyByIdDelegate, new object[] {
                        databasePrefix,
                        Id}, this.onEndGetDetailDataOnlyByIdDelegate, this.onGetDetailDataOnlyByIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Adhesive.Mongodb.Silverlight.Service.DataService.BeginGetAdminConfiguration(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAdminConfiguration(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem Adhesive.Mongodb.Silverlight.Service.DataService.EndGetAdminConfiguration(System.IAsyncResult result) {
            return base.Channel.EndGetAdminConfiguration(result);
        }
        
        private System.IAsyncResult OnBeginGetAdminConfiguration(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).BeginGetAdminConfiguration(username, password, callback, asyncState);
        }
        
        private object[] OnEndGetAdminConfiguration(System.IAsyncResult result) {
            Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem retVal = ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).EndGetAdminConfiguration(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAdminConfigurationCompleted(object state) {
            if ((this.GetAdminConfigurationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAdminConfigurationCompleted(this, new GetAdminConfigurationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAdminConfigurationAsync(string username, string password) {
            this.GetAdminConfigurationAsync(username, password, null);
        }
        
        public void GetAdminConfigurationAsync(string username, string password, object userState) {
            if ((this.onBeginGetAdminConfigurationDelegate == null)) {
                this.onBeginGetAdminConfigurationDelegate = new BeginOperationDelegate(this.OnBeginGetAdminConfiguration);
            }
            if ((this.onEndGetAdminConfigurationDelegate == null)) {
                this.onEndGetAdminConfigurationDelegate = new EndOperationDelegate(this.OnEndGetAdminConfiguration);
            }
            if ((this.onGetAdminConfigurationCompletedDelegate == null)) {
                this.onGetAdminConfigurationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAdminConfigurationCompleted);
            }
            base.InvokeAsync(this.onBeginGetAdminConfigurationDelegate, new object[] {
                        username,
                        password}, this.onEndGetAdminConfigurationDelegate, this.onGetAdminConfigurationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Adhesive.Mongodb.Silverlight.Service.DataService.BeginGetFilterData(string databasePrefix, System.Collections.Generic.List<string> tableNames, System.DateTime beginTime, System.DateTime endTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFilterData(databasePrefix, tableNames, beginTime, endTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Adhesive.Mongodb.Silverlight.Service.FilterData Adhesive.Mongodb.Silverlight.Service.DataService.EndGetFilterData(System.IAsyncResult result) {
            return base.Channel.EndGetFilterData(result);
        }
        
        private System.IAsyncResult OnBeginGetFilterData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string databasePrefix = ((string)(inValues[0]));
            System.Collections.Generic.List<string> tableNames = ((System.Collections.Generic.List<string>)(inValues[1]));
            System.DateTime beginTime = ((System.DateTime)(inValues[2]));
            System.DateTime endTime = ((System.DateTime)(inValues[3]));
            return ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).BeginGetFilterData(databasePrefix, tableNames, beginTime, endTime, callback, asyncState);
        }
        
        private object[] OnEndGetFilterData(System.IAsyncResult result) {
            Adhesive.Mongodb.Silverlight.Service.FilterData retVal = ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).EndGetFilterData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFilterDataCompleted(object state) {
            if ((this.GetFilterDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFilterDataCompleted(this, new GetFilterDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFilterDataAsync(string databasePrefix, System.Collections.Generic.List<string> tableNames, System.DateTime beginTime, System.DateTime endTime) {
            this.GetFilterDataAsync(databasePrefix, tableNames, beginTime, endTime, null);
        }
        
        public void GetFilterDataAsync(string databasePrefix, System.Collections.Generic.List<string> tableNames, System.DateTime beginTime, System.DateTime endTime, object userState) {
            if ((this.onBeginGetFilterDataDelegate == null)) {
                this.onBeginGetFilterDataDelegate = new BeginOperationDelegate(this.OnBeginGetFilterData);
            }
            if ((this.onEndGetFilterDataDelegate == null)) {
                this.onEndGetFilterDataDelegate = new EndOperationDelegate(this.OnEndGetFilterData);
            }
            if ((this.onGetFilterDataCompletedDelegate == null)) {
                this.onGetFilterDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFilterDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetFilterDataDelegate, new object[] {
                        databasePrefix,
                        tableNames,
                        beginTime,
                        endTime}, this.onEndGetFilterDataDelegate, this.onGetFilterDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Adhesive.Mongodb.Silverlight.Service.DataService.BeginGetTableData(string databasePrefix, System.Collections.Generic.List<string> tableNames, System.DateTime beginTime, System.DateTime endTime, int pageIndex, int pageSize, System.Collections.Generic.Dictionary<string, object> filters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTableData(databasePrefix, tableNames, beginTime, endTime, pageIndex, pageSize, filters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TableData> Adhesive.Mongodb.Silverlight.Service.DataService.EndGetTableData(System.IAsyncResult result) {
            return base.Channel.EndGetTableData(result);
        }
        
        private System.IAsyncResult OnBeginGetTableData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string databasePrefix = ((string)(inValues[0]));
            System.Collections.Generic.List<string> tableNames = ((System.Collections.Generic.List<string>)(inValues[1]));
            System.DateTime beginTime = ((System.DateTime)(inValues[2]));
            System.DateTime endTime = ((System.DateTime)(inValues[3]));
            int pageIndex = ((int)(inValues[4]));
            int pageSize = ((int)(inValues[5]));
            System.Collections.Generic.Dictionary<string, object> filters = ((System.Collections.Generic.Dictionary<string, object>)(inValues[6]));
            return ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).BeginGetTableData(databasePrefix, tableNames, beginTime, endTime, pageIndex, pageSize, filters, callback, asyncState);
        }
        
        private object[] OnEndGetTableData(System.IAsyncResult result) {
            System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TableData> retVal = ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).EndGetTableData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTableDataCompleted(object state) {
            if ((this.GetTableDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTableDataCompleted(this, new GetTableDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTableDataAsync(string databasePrefix, System.Collections.Generic.List<string> tableNames, System.DateTime beginTime, System.DateTime endTime, int pageIndex, int pageSize, System.Collections.Generic.Dictionary<string, object> filters) {
            this.GetTableDataAsync(databasePrefix, tableNames, beginTime, endTime, pageIndex, pageSize, filters, null);
        }
        
        public void GetTableDataAsync(string databasePrefix, System.Collections.Generic.List<string> tableNames, System.DateTime beginTime, System.DateTime endTime, int pageIndex, int pageSize, System.Collections.Generic.Dictionary<string, object> filters, object userState) {
            if ((this.onBeginGetTableDataDelegate == null)) {
                this.onBeginGetTableDataDelegate = new BeginOperationDelegate(this.OnBeginGetTableData);
            }
            if ((this.onEndGetTableDataDelegate == null)) {
                this.onEndGetTableDataDelegate = new EndOperationDelegate(this.OnEndGetTableData);
            }
            if ((this.onGetTableDataCompletedDelegate == null)) {
                this.onGetTableDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTableDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetTableDataDelegate, new object[] {
                        databasePrefix,
                        tableNames,
                        beginTime,
                        endTime,
                        pageIndex,
                        pageSize,
                        filters}, this.onEndGetTableDataDelegate, this.onGetTableDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Adhesive.Mongodb.Silverlight.Service.DataService.BeginGetTableDataByContextId(string contextId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTableDataByContextId(contextId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TableData> Adhesive.Mongodb.Silverlight.Service.DataService.EndGetTableDataByContextId(System.IAsyncResult result) {
            return base.Channel.EndGetTableDataByContextId(result);
        }
        
        private System.IAsyncResult OnBeginGetTableDataByContextId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string contextId = ((string)(inValues[0]));
            return ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).BeginGetTableDataByContextId(contextId, callback, asyncState);
        }
        
        private object[] OnEndGetTableDataByContextId(System.IAsyncResult result) {
            System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TableData> retVal = ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).EndGetTableDataByContextId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTableDataByContextIdCompleted(object state) {
            if ((this.GetTableDataByContextIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTableDataByContextIdCompleted(this, new GetTableDataByContextIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTableDataByContextIdAsync(string contextId) {
            this.GetTableDataByContextIdAsync(contextId, null);
        }
        
        public void GetTableDataByContextIdAsync(string contextId, object userState) {
            if ((this.onBeginGetTableDataByContextIdDelegate == null)) {
                this.onBeginGetTableDataByContextIdDelegate = new BeginOperationDelegate(this.OnBeginGetTableDataByContextId);
            }
            if ((this.onEndGetTableDataByContextIdDelegate == null)) {
                this.onEndGetTableDataByContextIdDelegate = new EndOperationDelegate(this.OnEndGetTableDataByContextId);
            }
            if ((this.onGetTableDataByContextIdCompletedDelegate == null)) {
                this.onGetTableDataByContextIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTableDataByContextIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetTableDataByContextIdDelegate, new object[] {
                        contextId}, this.onEndGetTableDataByContextIdDelegate, this.onGetTableDataByContextIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Adhesive.Mongodb.Silverlight.Service.DataService.BeginGetStatisticsData(string databasePrefix, System.Collections.Generic.List<string> tableNames, System.DateTime beginTime, System.DateTime endTime, System.TimeSpan span, System.Collections.Generic.Dictionary<string, object> filters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStatisticsData(databasePrefix, tableNames, beginTime, endTime, span, filters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Statistics> Adhesive.Mongodb.Silverlight.Service.DataService.EndGetStatisticsData(System.IAsyncResult result) {
            return base.Channel.EndGetStatisticsData(result);
        }
        
        private System.IAsyncResult OnBeginGetStatisticsData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string databasePrefix = ((string)(inValues[0]));
            System.Collections.Generic.List<string> tableNames = ((System.Collections.Generic.List<string>)(inValues[1]));
            System.DateTime beginTime = ((System.DateTime)(inValues[2]));
            System.DateTime endTime = ((System.DateTime)(inValues[3]));
            System.TimeSpan span = ((System.TimeSpan)(inValues[4]));
            System.Collections.Generic.Dictionary<string, object> filters = ((System.Collections.Generic.Dictionary<string, object>)(inValues[5]));
            return ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).BeginGetStatisticsData(databasePrefix, tableNames, beginTime, endTime, span, filters, callback, asyncState);
        }
        
        private object[] OnEndGetStatisticsData(System.IAsyncResult result) {
            System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Statistics> retVal = ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).EndGetStatisticsData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStatisticsDataCompleted(object state) {
            if ((this.GetStatisticsDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStatisticsDataCompleted(this, new GetStatisticsDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStatisticsDataAsync(string databasePrefix, System.Collections.Generic.List<string> tableNames, System.DateTime beginTime, System.DateTime endTime, System.TimeSpan span, System.Collections.Generic.Dictionary<string, object> filters) {
            this.GetStatisticsDataAsync(databasePrefix, tableNames, beginTime, endTime, span, filters, null);
        }
        
        public void GetStatisticsDataAsync(string databasePrefix, System.Collections.Generic.List<string> tableNames, System.DateTime beginTime, System.DateTime endTime, System.TimeSpan span, System.Collections.Generic.Dictionary<string, object> filters, object userState) {
            if ((this.onBeginGetStatisticsDataDelegate == null)) {
                this.onBeginGetStatisticsDataDelegate = new BeginOperationDelegate(this.OnBeginGetStatisticsData);
            }
            if ((this.onEndGetStatisticsDataDelegate == null)) {
                this.onEndGetStatisticsDataDelegate = new EndOperationDelegate(this.OnEndGetStatisticsData);
            }
            if ((this.onGetStatisticsDataCompletedDelegate == null)) {
                this.onGetStatisticsDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStatisticsDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetStatisticsDataDelegate, new object[] {
                        databasePrefix,
                        tableNames,
                        beginTime,
                        endTime,
                        span,
                        filters}, this.onEndGetStatisticsDataDelegate, this.onGetStatisticsDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Adhesive.Mongodb.Silverlight.Service.DataService.BeginGetDetailData(string databasePrefix, string databaseName, string tableName, string pkcolumnName, string Id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDetailData(databasePrefix, databaseName, tableName, pkcolumnName, Id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Adhesive.Mongodb.Silverlight.Service.DetailData Adhesive.Mongodb.Silverlight.Service.DataService.EndGetDetailData(System.IAsyncResult result) {
            return base.Channel.EndGetDetailData(result);
        }
        
        private System.IAsyncResult OnBeginGetDetailData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string databasePrefix = ((string)(inValues[0]));
            string databaseName = ((string)(inValues[1]));
            string tableName = ((string)(inValues[2]));
            string pkcolumnName = ((string)(inValues[3]));
            string Id = ((string)(inValues[4]));
            return ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).BeginGetDetailData(databasePrefix, databaseName, tableName, pkcolumnName, Id, callback, asyncState);
        }
        
        private object[] OnEndGetDetailData(System.IAsyncResult result) {
            Adhesive.Mongodb.Silverlight.Service.DetailData retVal = ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).EndGetDetailData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDetailDataCompleted(object state) {
            if ((this.GetDetailDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDetailDataCompleted(this, new GetDetailDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDetailDataAsync(string databasePrefix, string databaseName, string tableName, string pkcolumnName, string Id) {
            this.GetDetailDataAsync(databasePrefix, databaseName, tableName, pkcolumnName, Id, null);
        }
        
        public void GetDetailDataAsync(string databasePrefix, string databaseName, string tableName, string pkcolumnName, string Id, object userState) {
            if ((this.onBeginGetDetailDataDelegate == null)) {
                this.onBeginGetDetailDataDelegate = new BeginOperationDelegate(this.OnBeginGetDetailData);
            }
            if ((this.onEndGetDetailDataDelegate == null)) {
                this.onEndGetDetailDataDelegate = new EndOperationDelegate(this.OnEndGetDetailData);
            }
            if ((this.onGetDetailDataCompletedDelegate == null)) {
                this.onGetDetailDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDetailDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetDetailDataDelegate, new object[] {
                        databasePrefix,
                        databaseName,
                        tableName,
                        pkcolumnName,
                        Id}, this.onEndGetDetailDataDelegate, this.onGetDetailDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Adhesive.Mongodb.Silverlight.Service.DataService.BeginGetGroupData(string databasePrefix, System.Collections.Generic.List<string> tableNames, System.DateTime beginTime, System.DateTime endTime, System.Collections.Generic.Dictionary<string, object> filters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetGroupData(databasePrefix, tableNames, beginTime, endTime, filters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Group> Adhesive.Mongodb.Silverlight.Service.DataService.EndGetGroupData(System.IAsyncResult result) {
            return base.Channel.EndGetGroupData(result);
        }
        
        private System.IAsyncResult OnBeginGetGroupData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string databasePrefix = ((string)(inValues[0]));
            System.Collections.Generic.List<string> tableNames = ((System.Collections.Generic.List<string>)(inValues[1]));
            System.DateTime beginTime = ((System.DateTime)(inValues[2]));
            System.DateTime endTime = ((System.DateTime)(inValues[3]));
            System.Collections.Generic.Dictionary<string, object> filters = ((System.Collections.Generic.Dictionary<string, object>)(inValues[4]));
            return ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).BeginGetGroupData(databasePrefix, tableNames, beginTime, endTime, filters, callback, asyncState);
        }
        
        private object[] OnEndGetGroupData(System.IAsyncResult result) {
            System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Group> retVal = ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).EndGetGroupData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetGroupDataCompleted(object state) {
            if ((this.GetGroupDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetGroupDataCompleted(this, new GetGroupDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetGroupDataAsync(string databasePrefix, System.Collections.Generic.List<string> tableNames, System.DateTime beginTime, System.DateTime endTime, System.Collections.Generic.Dictionary<string, object> filters) {
            this.GetGroupDataAsync(databasePrefix, tableNames, beginTime, endTime, filters, null);
        }
        
        public void GetGroupDataAsync(string databasePrefix, System.Collections.Generic.List<string> tableNames, System.DateTime beginTime, System.DateTime endTime, System.Collections.Generic.Dictionary<string, object> filters, object userState) {
            if ((this.onBeginGetGroupDataDelegate == null)) {
                this.onBeginGetGroupDataDelegate = new BeginOperationDelegate(this.OnBeginGetGroupData);
            }
            if ((this.onEndGetGroupDataDelegate == null)) {
                this.onEndGetGroupDataDelegate = new EndOperationDelegate(this.OnEndGetGroupData);
            }
            if ((this.onGetGroupDataCompletedDelegate == null)) {
                this.onGetGroupDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetGroupDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetGroupDataDelegate, new object[] {
                        databasePrefix,
                        tableNames,
                        beginTime,
                        endTime,
                        filters}, this.onEndGetGroupDataDelegate, this.onGetGroupDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Adhesive.Mongodb.Silverlight.Service.DataService.BeginGetStateData(string databasePrefix, string tableName, System.DateTime beginTime, System.DateTime endTime, System.Collections.Generic.Dictionary<string, object> filters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStateData(databasePrefix, tableName, beginTime, endTime, filters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Adhesive.Mongodb.Silverlight.Service.DetailData Adhesive.Mongodb.Silverlight.Service.DataService.EndGetStateData(System.IAsyncResult result) {
            return base.Channel.EndGetStateData(result);
        }
        
        private System.IAsyncResult OnBeginGetStateData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string databasePrefix = ((string)(inValues[0]));
            string tableName = ((string)(inValues[1]));
            System.DateTime beginTime = ((System.DateTime)(inValues[2]));
            System.DateTime endTime = ((System.DateTime)(inValues[3]));
            System.Collections.Generic.Dictionary<string, object> filters = ((System.Collections.Generic.Dictionary<string, object>)(inValues[4]));
            return ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).BeginGetStateData(databasePrefix, tableName, beginTime, endTime, filters, callback, asyncState);
        }
        
        private object[] OnEndGetStateData(System.IAsyncResult result) {
            Adhesive.Mongodb.Silverlight.Service.DetailData retVal = ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).EndGetStateData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStateDataCompleted(object state) {
            if ((this.GetStateDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStateDataCompleted(this, new GetStateDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStateDataAsync(string databasePrefix, string tableName, System.DateTime beginTime, System.DateTime endTime, System.Collections.Generic.Dictionary<string, object> filters) {
            this.GetStateDataAsync(databasePrefix, tableName, beginTime, endTime, filters, null);
        }
        
        public void GetStateDataAsync(string databasePrefix, string tableName, System.DateTime beginTime, System.DateTime endTime, System.Collections.Generic.Dictionary<string, object> filters, object userState) {
            if ((this.onBeginGetStateDataDelegate == null)) {
                this.onBeginGetStateDataDelegate = new BeginOperationDelegate(this.OnBeginGetStateData);
            }
            if ((this.onEndGetStateDataDelegate == null)) {
                this.onEndGetStateDataDelegate = new EndOperationDelegate(this.OnEndGetStateData);
            }
            if ((this.onGetStateDataCompletedDelegate == null)) {
                this.onGetStateDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStateDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetStateDataDelegate, new object[] {
                        databasePrefix,
                        tableName,
                        beginTime,
                        endTime,
                        filters}, this.onEndGetStateDataDelegate, this.onGetStateDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Adhesive.Mongodb.Silverlight.Service.DataService.BeginGetAlarmItems(Adhesive.Mongodb.Silverlight.Service.AlarmStatus status, Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem admin, int pageSize, int pageIndex, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAlarmItems(status, admin, pageSize, pageIndex, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Adhesive.Mongodb.Silverlight.Service.GetAlarmItemsResult Adhesive.Mongodb.Silverlight.Service.DataService.EndGetAlarmItems(System.IAsyncResult result) {
            return base.Channel.EndGetAlarmItems(result);
        }
        
        private System.IAsyncResult OnBeginGetAlarmItems(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Adhesive.Mongodb.Silverlight.Service.AlarmStatus status = ((Adhesive.Mongodb.Silverlight.Service.AlarmStatus)(inValues[0]));
            Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem admin = ((Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem)(inValues[1]));
            int pageSize = ((int)(inValues[2]));
            int pageIndex = ((int)(inValues[3]));
            return ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).BeginGetAlarmItems(status, admin, pageSize, pageIndex, callback, asyncState);
        }
        
        private object[] OnEndGetAlarmItems(System.IAsyncResult result) {
            Adhesive.Mongodb.Silverlight.Service.GetAlarmItemsResult retVal = ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).EndGetAlarmItems(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAlarmItemsCompleted(object state) {
            if ((this.GetAlarmItemsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAlarmItemsCompleted(this, new GetAlarmItemsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAlarmItemsAsync(Adhesive.Mongodb.Silverlight.Service.AlarmStatus status, Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem admin, int pageSize, int pageIndex) {
            this.GetAlarmItemsAsync(status, admin, pageSize, pageIndex, null);
        }
        
        public void GetAlarmItemsAsync(Adhesive.Mongodb.Silverlight.Service.AlarmStatus status, Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem admin, int pageSize, int pageIndex, object userState) {
            if ((this.onBeginGetAlarmItemsDelegate == null)) {
                this.onBeginGetAlarmItemsDelegate = new BeginOperationDelegate(this.OnBeginGetAlarmItems);
            }
            if ((this.onEndGetAlarmItemsDelegate == null)) {
                this.onEndGetAlarmItemsDelegate = new EndOperationDelegate(this.OnEndGetAlarmItems);
            }
            if ((this.onGetAlarmItemsCompletedDelegate == null)) {
                this.onGetAlarmItemsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAlarmItemsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAlarmItemsDelegate, new object[] {
                        status,
                        admin,
                        pageSize,
                        pageIndex}, this.onEndGetAlarmItemsDelegate, this.onGetAlarmItemsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Adhesive.Mongodb.Silverlight.Service.DataService.BeginGetAlarmProcessItem(string id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAlarmProcessItem(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.AlarmProcessItem> Adhesive.Mongodb.Silverlight.Service.DataService.EndGetAlarmProcessItem(System.IAsyncResult result) {
            return base.Channel.EndGetAlarmProcessItem(result);
        }
        
        private System.IAsyncResult OnBeginGetAlarmProcessItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            return ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).BeginGetAlarmProcessItem(id, callback, asyncState);
        }
        
        private object[] OnEndGetAlarmProcessItem(System.IAsyncResult result) {
            System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.AlarmProcessItem> retVal = ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).EndGetAlarmProcessItem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAlarmProcessItemCompleted(object state) {
            if ((this.GetAlarmProcessItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAlarmProcessItemCompleted(this, new GetAlarmProcessItemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAlarmProcessItemAsync(string id) {
            this.GetAlarmProcessItemAsync(id, null);
        }
        
        public void GetAlarmProcessItemAsync(string id, object userState) {
            if ((this.onBeginGetAlarmProcessItemDelegate == null)) {
                this.onBeginGetAlarmProcessItemDelegate = new BeginOperationDelegate(this.OnBeginGetAlarmProcessItem);
            }
            if ((this.onEndGetAlarmProcessItemDelegate == null)) {
                this.onEndGetAlarmProcessItemDelegate = new EndOperationDelegate(this.OnEndGetAlarmProcessItem);
            }
            if ((this.onGetAlarmProcessItemCompletedDelegate == null)) {
                this.onGetAlarmProcessItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAlarmProcessItemCompleted);
            }
            base.InvokeAsync(this.onBeginGetAlarmProcessItemDelegate, new object[] {
                        id}, this.onEndGetAlarmProcessItemDelegate, this.onGetAlarmProcessItemCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Adhesive.Mongodb.Silverlight.Service.DataService.BeginGetAlarmGroup(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAlarmGroup(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<string> Adhesive.Mongodb.Silverlight.Service.DataService.EndGetAlarmGroup(System.IAsyncResult result) {
            return base.Channel.EndGetAlarmGroup(result);
        }
        
        private System.IAsyncResult OnBeginGetAlarmGroup(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).BeginGetAlarmGroup(callback, asyncState);
        }
        
        private object[] OnEndGetAlarmGroup(System.IAsyncResult result) {
            System.Collections.Generic.List<string> retVal = ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).EndGetAlarmGroup(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAlarmGroupCompleted(object state) {
            if ((this.GetAlarmGroupCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAlarmGroupCompleted(this, new GetAlarmGroupCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAlarmGroupAsync() {
            this.GetAlarmGroupAsync(null);
        }
        
        public void GetAlarmGroupAsync(object userState) {
            if ((this.onBeginGetAlarmGroupDelegate == null)) {
                this.onBeginGetAlarmGroupDelegate = new BeginOperationDelegate(this.OnBeginGetAlarmGroup);
            }
            if ((this.onEndGetAlarmGroupDelegate == null)) {
                this.onEndGetAlarmGroupDelegate = new EndOperationDelegate(this.OnEndGetAlarmGroup);
            }
            if ((this.onGetAlarmGroupCompletedDelegate == null)) {
                this.onGetAlarmGroupCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAlarmGroupCompleted);
            }
            base.InvokeAsync(this.onBeginGetAlarmGroupDelegate, null, this.onEndGetAlarmGroupDelegate, this.onGetAlarmGroupCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Adhesive.Mongodb.Silverlight.Service.DataService.BeginGetAlarmReceivers(string groupName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAlarmReceivers(groupName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem> Adhesive.Mongodb.Silverlight.Service.DataService.EndGetAlarmReceivers(System.IAsyncResult result) {
            return base.Channel.EndGetAlarmReceivers(result);
        }
        
        private System.IAsyncResult OnBeginGetAlarmReceivers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string groupName = ((string)(inValues[0]));
            return ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).BeginGetAlarmReceivers(groupName, callback, asyncState);
        }
        
        private object[] OnEndGetAlarmReceivers(System.IAsyncResult result) {
            System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem> retVal = ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).EndGetAlarmReceivers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAlarmReceiversCompleted(object state) {
            if ((this.GetAlarmReceiversCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAlarmReceiversCompleted(this, new GetAlarmReceiversCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAlarmReceiversAsync(string groupName) {
            this.GetAlarmReceiversAsync(groupName, null);
        }
        
        public void GetAlarmReceiversAsync(string groupName, object userState) {
            if ((this.onBeginGetAlarmReceiversDelegate == null)) {
                this.onBeginGetAlarmReceiversDelegate = new BeginOperationDelegate(this.OnBeginGetAlarmReceivers);
            }
            if ((this.onEndGetAlarmReceiversDelegate == null)) {
                this.onEndGetAlarmReceiversDelegate = new EndOperationDelegate(this.OnEndGetAlarmReceivers);
            }
            if ((this.onGetAlarmReceiversCompletedDelegate == null)) {
                this.onGetAlarmReceiversCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAlarmReceiversCompleted);
            }
            base.InvokeAsync(this.onBeginGetAlarmReceiversDelegate, new object[] {
                        groupName}, this.onEndGetAlarmReceiversDelegate, this.onGetAlarmReceiversCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Adhesive.Mongodb.Silverlight.Service.DataService.BeginSendMessage(string configName, string mobileMessage, string mailMessage, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendMessage(configName, mobileMessage, mailMessage, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Adhesive.Mongodb.Silverlight.Service.DataService.EndSendMessage(System.IAsyncResult result) {
            base.Channel.EndSendMessage(result);
        }
        
        private System.IAsyncResult OnBeginSendMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string configName = ((string)(inValues[0]));
            string mobileMessage = ((string)(inValues[1]));
            string mailMessage = ((string)(inValues[2]));
            return ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).BeginSendMessage(configName, mobileMessage, mailMessage, callback, asyncState);
        }
        
        private object[] OnEndSendMessage(System.IAsyncResult result) {
            ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).EndSendMessage(result);
            return null;
        }
        
        private void OnSendMessageCompleted(object state) {
            if ((this.SendMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendMessageAsync(string configName, string mobileMessage, string mailMessage) {
            this.SendMessageAsync(configName, mobileMessage, mailMessage, null);
        }
        
        public void SendMessageAsync(string configName, string mobileMessage, string mailMessage, object userState) {
            if ((this.onBeginSendMessageDelegate == null)) {
                this.onBeginSendMessageDelegate = new BeginOperationDelegate(this.OnBeginSendMessage);
            }
            if ((this.onEndSendMessageDelegate == null)) {
                this.onEndSendMessageDelegate = new EndOperationDelegate(this.OnEndSendMessage);
            }
            if ((this.onSendMessageCompletedDelegate == null)) {
                this.onSendMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendMessageCompleted);
            }
            base.InvokeAsync(this.onBeginSendMessageDelegate, new object[] {
                        configName,
                        mobileMessage,
                        mailMessage}, this.onEndSendMessageDelegate, this.onSendMessageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Adhesive.Mongodb.Silverlight.Service.DataService.BeginSendMobile(System.Collections.Generic.List<string> userNames, string Message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendMobile(userNames, Message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Adhesive.Mongodb.Silverlight.Service.DataService.EndSendMobile(System.IAsyncResult result) {
            base.Channel.EndSendMobile(result);
        }
        
        private System.IAsyncResult OnBeginSendMobile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> userNames = ((System.Collections.Generic.List<string>)(inValues[0]));
            string Message = ((string)(inValues[1]));
            return ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).BeginSendMobile(userNames, Message, callback, asyncState);
        }
        
        private object[] OnEndSendMobile(System.IAsyncResult result) {
            ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).EndSendMobile(result);
            return null;
        }
        
        private void OnSendMobileCompleted(object state) {
            if ((this.SendMobileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendMobileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendMobileAsync(System.Collections.Generic.List<string> userNames, string Message) {
            this.SendMobileAsync(userNames, Message, null);
        }
        
        public void SendMobileAsync(System.Collections.Generic.List<string> userNames, string Message, object userState) {
            if ((this.onBeginSendMobileDelegate == null)) {
                this.onBeginSendMobileDelegate = new BeginOperationDelegate(this.OnBeginSendMobile);
            }
            if ((this.onEndSendMobileDelegate == null)) {
                this.onEndSendMobileDelegate = new EndOperationDelegate(this.OnEndSendMobile);
            }
            if ((this.onSendMobileCompletedDelegate == null)) {
                this.onSendMobileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendMobileCompleted);
            }
            base.InvokeAsync(this.onBeginSendMobileDelegate, new object[] {
                        userNames,
                        Message}, this.onEndSendMobileDelegate, this.onSendMobileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Adhesive.Mongodb.Silverlight.Service.DataService.BeginSendEmail(System.Collections.Generic.List<string> userNames, string Message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendEmail(userNames, Message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Adhesive.Mongodb.Silverlight.Service.DataService.EndSendEmail(System.IAsyncResult result) {
            base.Channel.EndSendEmail(result);
        }
        
        private System.IAsyncResult OnBeginSendEmail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> userNames = ((System.Collections.Generic.List<string>)(inValues[0]));
            string Message = ((string)(inValues[1]));
            return ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).BeginSendEmail(userNames, Message, callback, asyncState);
        }
        
        private object[] OnEndSendEmail(System.IAsyncResult result) {
            ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).EndSendEmail(result);
            return null;
        }
        
        private void OnSendEmailCompleted(object state) {
            if ((this.SendEmailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendEmailCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendEmailAsync(System.Collections.Generic.List<string> userNames, string Message) {
            this.SendEmailAsync(userNames, Message, null);
        }
        
        public void SendEmailAsync(System.Collections.Generic.List<string> userNames, string Message, object userState) {
            if ((this.onBeginSendEmailDelegate == null)) {
                this.onBeginSendEmailDelegate = new BeginOperationDelegate(this.OnBeginSendEmail);
            }
            if ((this.onEndSendEmailDelegate == null)) {
                this.onEndSendEmailDelegate = new EndOperationDelegate(this.OnEndSendEmail);
            }
            if ((this.onSendEmailCompletedDelegate == null)) {
                this.onSendEmailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendEmailCompleted);
            }
            base.InvokeAsync(this.onBeginSendEmailDelegate, new object[] {
                        userNames,
                        Message}, this.onEndSendEmailDelegate, this.onSendEmailCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Adhesive.Mongodb.Silverlight.Service.DataService.BeginHandleAlarmEvent(string id, string mobileMessage, string mailMessage, string userName, string userRealName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginHandleAlarmEvent(id, mobileMessage, mailMessage, userName, userRealName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Adhesive.Mongodb.Silverlight.Service.DataService.EndHandleAlarmEvent(System.IAsyncResult result) {
            base.Channel.EndHandleAlarmEvent(result);
        }
        
        private System.IAsyncResult OnBeginHandleAlarmEvent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            string mobileMessage = ((string)(inValues[1]));
            string mailMessage = ((string)(inValues[2]));
            string userName = ((string)(inValues[3]));
            string userRealName = ((string)(inValues[4]));
            return ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).BeginHandleAlarmEvent(id, mobileMessage, mailMessage, userName, userRealName, callback, asyncState);
        }
        
        private object[] OnEndHandleAlarmEvent(System.IAsyncResult result) {
            ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).EndHandleAlarmEvent(result);
            return null;
        }
        
        private void OnHandleAlarmEventCompleted(object state) {
            if ((this.HandleAlarmEventCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.HandleAlarmEventCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void HandleAlarmEventAsync(string id, string mobileMessage, string mailMessage, string userName, string userRealName) {
            this.HandleAlarmEventAsync(id, mobileMessage, mailMessage, userName, userRealName, null);
        }
        
        public void HandleAlarmEventAsync(string id, string mobileMessage, string mailMessage, string userName, string userRealName, object userState) {
            if ((this.onBeginHandleAlarmEventDelegate == null)) {
                this.onBeginHandleAlarmEventDelegate = new BeginOperationDelegate(this.OnBeginHandleAlarmEvent);
            }
            if ((this.onEndHandleAlarmEventDelegate == null)) {
                this.onEndHandleAlarmEventDelegate = new EndOperationDelegate(this.OnEndHandleAlarmEvent);
            }
            if ((this.onHandleAlarmEventCompletedDelegate == null)) {
                this.onHandleAlarmEventCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnHandleAlarmEventCompleted);
            }
            base.InvokeAsync(this.onBeginHandleAlarmEventDelegate, new object[] {
                        id,
                        mobileMessage,
                        mailMessage,
                        userName,
                        userRealName}, this.onEndHandleAlarmEventDelegate, this.onHandleAlarmEventCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Adhesive.Mongodb.Silverlight.Service.DataService.BeginCloseAlarmEvent(string id, string mobileMessage, string mailMessage, string userName, string userRealName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCloseAlarmEvent(id, mobileMessage, mailMessage, userName, userRealName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Adhesive.Mongodb.Silverlight.Service.DataService.EndCloseAlarmEvent(System.IAsyncResult result) {
            base.Channel.EndCloseAlarmEvent(result);
        }
        
        private System.IAsyncResult OnBeginCloseAlarmEvent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            string mobileMessage = ((string)(inValues[1]));
            string mailMessage = ((string)(inValues[2]));
            string userName = ((string)(inValues[3]));
            string userRealName = ((string)(inValues[4]));
            return ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).BeginCloseAlarmEvent(id, mobileMessage, mailMessage, userName, userRealName, callback, asyncState);
        }
        
        private object[] OnEndCloseAlarmEvent(System.IAsyncResult result) {
            ((Adhesive.Mongodb.Silverlight.Service.DataService)(this)).EndCloseAlarmEvent(result);
            return null;
        }
        
        private void OnCloseAlarmEventCompleted(object state) {
            if ((this.CloseAlarmEventCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseAlarmEventCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAlarmEventAsync(string id, string mobileMessage, string mailMessage, string userName, string userRealName) {
            this.CloseAlarmEventAsync(id, mobileMessage, mailMessage, userName, userRealName, null);
        }
        
        public void CloseAlarmEventAsync(string id, string mobileMessage, string mailMessage, string userName, string userRealName, object userState) {
            if ((this.onBeginCloseAlarmEventDelegate == null)) {
                this.onBeginCloseAlarmEventDelegate = new BeginOperationDelegate(this.OnBeginCloseAlarmEvent);
            }
            if ((this.onEndCloseAlarmEventDelegate == null)) {
                this.onEndCloseAlarmEventDelegate = new EndOperationDelegate(this.OnEndCloseAlarmEvent);
            }
            if ((this.onCloseAlarmEventCompletedDelegate == null)) {
                this.onCloseAlarmEventCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseAlarmEventCompleted);
            }
            base.InvokeAsync(this.onBeginCloseAlarmEventDelegate, new object[] {
                        id,
                        mobileMessage,
                        mailMessage,
                        userName,
                        userRealName}, this.onEndCloseAlarmEventDelegate, this.onCloseAlarmEventCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Adhesive.Mongodb.Silverlight.Service.DataService CreateChannel() {
            return new DataServiceClientChannel(this);
        }
        
        private class DataServiceClientChannel : ChannelBase<Adhesive.Mongodb.Silverlight.Service.DataService>, Adhesive.Mongodb.Silverlight.Service.DataService {
            
            public DataServiceClientChannel(System.ServiceModel.ClientBase<Adhesive.Mongodb.Silverlight.Service.DataService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginLog(Adhesive.Mongodb.Silverlight.Service.OperationLog log, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = log;
                System.IAsyncResult _result = base.BeginInvoke("Log", _args, callback, asyncState);
                return _result;
            }
            
            public void EndLog(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Log", _args, result);
            }
            
            public System.IAsyncResult BeginGetCategoryData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCategoryData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Category> EndGetCategoryData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Category> _result = ((System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Category>)(base.EndInvoke("GetCategoryData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetServerInfo(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetServerInfo", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<Adhesive.Mongodb.Silverlight.Service.MongodbServerUrl, Adhesive.Mongodb.Silverlight.Service.ServerInfo> EndGetServerInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<Adhesive.Mongodb.Silverlight.Service.MongodbServerUrl, Adhesive.Mongodb.Silverlight.Service.ServerInfo> _result = ((System.Collections.Generic.Dictionary<Adhesive.Mongodb.Silverlight.Service.MongodbServerUrl, Adhesive.Mongodb.Silverlight.Service.ServerInfo>)(base.EndInvoke("GetServerInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDetailDataOnlyById(string databasePrefix, string Id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = databasePrefix;
                _args[1] = Id;
                System.IAsyncResult _result = base.BeginInvoke("GetDetailDataOnlyById", _args, callback, asyncState);
                return _result;
            }
            
            public Adhesive.Mongodb.Silverlight.Service.DetailData EndGetDetailDataOnlyById(System.IAsyncResult result) {
                object[] _args = new object[0];
                Adhesive.Mongodb.Silverlight.Service.DetailData _result = ((Adhesive.Mongodb.Silverlight.Service.DetailData)(base.EndInvoke("GetDetailDataOnlyById", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAdminConfiguration(string username, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("GetAdminConfiguration", _args, callback, asyncState);
                return _result;
            }
            
            public Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem EndGetAdminConfiguration(System.IAsyncResult result) {
                object[] _args = new object[0];
                Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem _result = ((Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem)(base.EndInvoke("GetAdminConfiguration", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFilterData(string databasePrefix, System.Collections.Generic.List<string> tableNames, System.DateTime beginTime, System.DateTime endTime, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = databasePrefix;
                _args[1] = tableNames;
                _args[2] = beginTime;
                _args[3] = endTime;
                System.IAsyncResult _result = base.BeginInvoke("GetFilterData", _args, callback, asyncState);
                return _result;
            }
            
            public Adhesive.Mongodb.Silverlight.Service.FilterData EndGetFilterData(System.IAsyncResult result) {
                object[] _args = new object[0];
                Adhesive.Mongodb.Silverlight.Service.FilterData _result = ((Adhesive.Mongodb.Silverlight.Service.FilterData)(base.EndInvoke("GetFilterData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTableData(string databasePrefix, System.Collections.Generic.List<string> tableNames, System.DateTime beginTime, System.DateTime endTime, int pageIndex, int pageSize, System.Collections.Generic.Dictionary<string, object> filters, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = databasePrefix;
                _args[1] = tableNames;
                _args[2] = beginTime;
                _args[3] = endTime;
                _args[4] = pageIndex;
                _args[5] = pageSize;
                _args[6] = filters;
                System.IAsyncResult _result = base.BeginInvoke("GetTableData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TableData> EndGetTableData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TableData> _result = ((System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TableData>)(base.EndInvoke("GetTableData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTableDataByContextId(string contextId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = contextId;
                System.IAsyncResult _result = base.BeginInvoke("GetTableDataByContextId", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TableData> EndGetTableDataByContextId(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TableData> _result = ((System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.TableData>)(base.EndInvoke("GetTableDataByContextId", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetStatisticsData(string databasePrefix, System.Collections.Generic.List<string> tableNames, System.DateTime beginTime, System.DateTime endTime, System.TimeSpan span, System.Collections.Generic.Dictionary<string, object> filters, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = databasePrefix;
                _args[1] = tableNames;
                _args[2] = beginTime;
                _args[3] = endTime;
                _args[4] = span;
                _args[5] = filters;
                System.IAsyncResult _result = base.BeginInvoke("GetStatisticsData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Statistics> EndGetStatisticsData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Statistics> _result = ((System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Statistics>)(base.EndInvoke("GetStatisticsData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDetailData(string databasePrefix, string databaseName, string tableName, string pkcolumnName, string Id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = databasePrefix;
                _args[1] = databaseName;
                _args[2] = tableName;
                _args[3] = pkcolumnName;
                _args[4] = Id;
                System.IAsyncResult _result = base.BeginInvoke("GetDetailData", _args, callback, asyncState);
                return _result;
            }
            
            public Adhesive.Mongodb.Silverlight.Service.DetailData EndGetDetailData(System.IAsyncResult result) {
                object[] _args = new object[0];
                Adhesive.Mongodb.Silverlight.Service.DetailData _result = ((Adhesive.Mongodb.Silverlight.Service.DetailData)(base.EndInvoke("GetDetailData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetGroupData(string databasePrefix, System.Collections.Generic.List<string> tableNames, System.DateTime beginTime, System.DateTime endTime, System.Collections.Generic.Dictionary<string, object> filters, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = databasePrefix;
                _args[1] = tableNames;
                _args[2] = beginTime;
                _args[3] = endTime;
                _args[4] = filters;
                System.IAsyncResult _result = base.BeginInvoke("GetGroupData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Group> EndGetGroupData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Group> _result = ((System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.Group>)(base.EndInvoke("GetGroupData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetStateData(string databasePrefix, string tableName, System.DateTime beginTime, System.DateTime endTime, System.Collections.Generic.Dictionary<string, object> filters, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = databasePrefix;
                _args[1] = tableName;
                _args[2] = beginTime;
                _args[3] = endTime;
                _args[4] = filters;
                System.IAsyncResult _result = base.BeginInvoke("GetStateData", _args, callback, asyncState);
                return _result;
            }
            
            public Adhesive.Mongodb.Silverlight.Service.DetailData EndGetStateData(System.IAsyncResult result) {
                object[] _args = new object[0];
                Adhesive.Mongodb.Silverlight.Service.DetailData _result = ((Adhesive.Mongodb.Silverlight.Service.DetailData)(base.EndInvoke("GetStateData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAlarmItems(Adhesive.Mongodb.Silverlight.Service.AlarmStatus status, Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem admin, int pageSize, int pageIndex, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = status;
                _args[1] = admin;
                _args[2] = pageSize;
                _args[3] = pageIndex;
                System.IAsyncResult _result = base.BeginInvoke("GetAlarmItems", _args, callback, asyncState);
                return _result;
            }
            
            public Adhesive.Mongodb.Silverlight.Service.GetAlarmItemsResult EndGetAlarmItems(System.IAsyncResult result) {
                object[] _args = new object[0];
                Adhesive.Mongodb.Silverlight.Service.GetAlarmItemsResult _result = ((Adhesive.Mongodb.Silverlight.Service.GetAlarmItemsResult)(base.EndInvoke("GetAlarmItems", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAlarmProcessItem(string id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetAlarmProcessItem", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.AlarmProcessItem> EndGetAlarmProcessItem(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.AlarmProcessItem> _result = ((System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.AlarmProcessItem>)(base.EndInvoke("GetAlarmProcessItem", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAlarmGroup(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAlarmGroup", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<string> EndGetAlarmGroup(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<string> _result = ((System.Collections.Generic.List<string>)(base.EndInvoke("GetAlarmGroup", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAlarmReceivers(string groupName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = groupName;
                System.IAsyncResult _result = base.BeginInvoke("GetAlarmReceivers", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem> EndGetAlarmReceivers(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem> _result = ((System.Collections.Generic.List<Adhesive.Mongodb.Silverlight.Service.MongodbAdminConfigurationItem>)(base.EndInvoke("GetAlarmReceivers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendMessage(string configName, string mobileMessage, string mailMessage, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = configName;
                _args[1] = mobileMessage;
                _args[2] = mailMessage;
                System.IAsyncResult _result = base.BeginInvoke("SendMessage", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSendMessage(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SendMessage", _args, result);
            }
            
            public System.IAsyncResult BeginSendMobile(System.Collections.Generic.List<string> userNames, string Message, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userNames;
                _args[1] = Message;
                System.IAsyncResult _result = base.BeginInvoke("SendMobile", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSendMobile(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SendMobile", _args, result);
            }
            
            public System.IAsyncResult BeginSendEmail(System.Collections.Generic.List<string> userNames, string Message, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userNames;
                _args[1] = Message;
                System.IAsyncResult _result = base.BeginInvoke("SendEmail", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSendEmail(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SendEmail", _args, result);
            }
            
            public System.IAsyncResult BeginHandleAlarmEvent(string id, string mobileMessage, string mailMessage, string userName, string userRealName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = id;
                _args[1] = mobileMessage;
                _args[2] = mailMessage;
                _args[3] = userName;
                _args[4] = userRealName;
                System.IAsyncResult _result = base.BeginInvoke("HandleAlarmEvent", _args, callback, asyncState);
                return _result;
            }
            
            public void EndHandleAlarmEvent(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("HandleAlarmEvent", _args, result);
            }
            
            public System.IAsyncResult BeginCloseAlarmEvent(string id, string mobileMessage, string mailMessage, string userName, string userRealName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = id;
                _args[1] = mobileMessage;
                _args[2] = mailMessage;
                _args[3] = userName;
                _args[4] = userRealName;
                System.IAsyncResult _result = base.BeginInvoke("CloseAlarmEvent", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCloseAlarmEvent(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CloseAlarmEvent", _args, result);
            }
        }
    }
}
